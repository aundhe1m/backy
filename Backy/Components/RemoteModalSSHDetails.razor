@using Backy.Models
@using Microsoft.AspNetCore.Components.Forms
@inject IDataProtectionProvider DataProtectionProvider
@inject IRemoteConnectionService RemoteConnectionService
@inject ToastService ToastService
@inject ILogger<RemoteModalSSHDetails> Logger

<Modal @ref="sshDetailsModal" Size="ModalSize.Large" Title="@ModalTitle" OnClosed="OnModalClosed">
    <BodyTemplate>
        <EditForm EditContext="@editContext" OnValidSubmit="@HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <!-- SSH Details Form -->
            <div>
                <h3>SSH Details</h3>
                <div class="mb-3">
                    <label for="ConnectionName" class="form-label">Connection Name</label>
                    <InputText id="ConnectionName" class="form-control" @bind-Value="RemoteConnectionModel.Name"
                        required />
                    <ValidationMessage For="@(() => RemoteConnectionModel.Name)" />
                </div>
                <div class="mb-3">
                    <label for="Hostname" class="form-label">Hostname/IP</label>
                    <InputText id="Hostname" class="form-control" @bind-Value="RemoteConnectionModel.Host" required />
                    <ValidationMessage For="@(() => RemoteConnectionModel.Host)" />
                </div>
                <div class="mb-3">
                    <label for="Port" class="form-label">Port</label>
                    <InputNumber id="Port" class="form-control" @bind-Value="RemoteConnectionModel.Port" />
                    <ValidationMessage For="@(() => RemoteConnectionModel.Port)" />
                </div>
                <div class="mb-3">
                    <label for="Username" class="form-label">Username</label>
                    <InputText id="Username" class="form-control" @bind-Value="RemoteConnectionModel.Username"
                        required />
                    <ValidationMessage For="@(() => RemoteConnectionModel.Username)" />
                </div>
                <div class="mb-3">
                    <label class="form-label">Authentication Method</label>
                    <InputRadioGroup @bind-Value="RemoteConnectionModel.AuthenticationMethod">
                        <label>
                            <InputRadio Value="RemoteConnection.AuthMethod.Password" /> Password
                        </label>
                        <label class="ms-3">
                            <InputRadio Value="RemoteConnection.AuthMethod.SSHKey" /> SSH Key
                        </label>
                    </InputRadioGroup>
                    <ValidationMessage For="@(() => RemoteConnectionModel.AuthenticationMethod)" />
                </div>
                @if (RemoteConnectionModel.AuthenticationMethod == RemoteConnection.AuthMethod.Password)
                {
                    <div class="mb-3">
                        <label for="Password" class="form-label">Password</label>
                        <InputText id="Password" type="password" class="form-control" @bind-Value="Password"
                            placeholder="Leave blank to keep existing password" />
                    </div>
                }
                else if (RemoteConnectionModel.AuthenticationMethod == RemoteConnection.AuthMethod.SSHKey)
                {
                    <div class="mb-3">
                        <label for="SSHKey" class="form-label">SSH Key</label>
                        <InputTextArea id="SSHKey" class="form-control" @bind-Value="SSHKey"
                            placeholder="Leave blank to keep existing SSH key" />
                    </div>
                }
            </div>
        </EditForm>
    </BodyTemplate>
    <FooterTemplate>
        <button class="btn btn-secondary" @onclick="CloseModal">Cancel</button>
        @if (IsEditMode)
        {
            <button class="btn btn-primary" @onclick="HandleValidSubmit">Save</button>
        }
        else
        {
            <button class="btn btn-primary" @onclick="HandleValidSubmit">Next</button>
        }
    </FooterTemplate>
</Modal>

@code {
    [Parameter]
    public RemoteConnection RemoteConnectionModel { get; set; } = new RemoteConnection();

    [Parameter]
    public bool IsEditMode { get; set; } = false;

    [Parameter]
    public EventCallback OnSaved { get; set; }

    [Parameter]
    public EventCallback OnNext { get; set; }

    private string ModalTitle => IsEditMode ? "Edit SSH Details" : "Add Remote Connection";

    private Modal sshDetailsModal = default!;
    private EditContext editContext = default!;
    private string Password { get; set; } = string.Empty;
    private string SSHKey { get; set; } = string.Empty;

    protected override void OnParametersSet()
    {
        editContext = new EditContext(RemoteConnectionModel);
    }

    public async Task ShowAsync()
    {
        await sshDetailsModal.ShowAsync();
    }

    private async Task CloseModal()
    {
        await sshDetailsModal.HideAsync();
    }

    private Task OnModalClosed()
    {
        // Clear sensitive data
        Password = string.Empty;
        SSHKey = string.Empty;
        return Task.CompletedTask;
    }

    private async Task HandleValidSubmit()
    {
        if (!editContext.Validate())
        {
            return;
        }

        // Validate SSH Connection
        bool isValidConnection = await ValidateSSHConnection();

        if (!isValidConnection)
        {
            ToastService.Notify(new ToastMessage(ToastType.Danger, "SSH Connection validation failed."));
            return;
        }

        // Encrypt Password and SSHKey
        var protector = DataProtectionProvider.CreateProtector("RemoteConnectionProtector");
        if (!string.IsNullOrEmpty(Password))
        {
            RemoteConnectionModel.Password = protector.Protect(Password);
        }
        else if (IsEditMode && RemoteConnectionModel.AuthenticationMethod == RemoteConnection.AuthMethod.Password)
        {
            // Keep existing password
        }
        if (!string.IsNullOrEmpty(SSHKey))
        {
            RemoteConnectionModel.SSHKey = protector.Protect(SSHKey);
        }
        else if (IsEditMode && RemoteConnectionModel.AuthenticationMethod == RemoteConnection.AuthMethod.SSHKey)
        {
            // Keep existing SSH key
        }

        if (IsEditMode)
        {
            // Notify parent component
            await OnSaved.InvokeAsync();
            await CloseModal();
        }
        else
        {
            await OnNext.InvokeAsync();
        }
    }

    private async Task<bool> ValidateSSHConnection()
    {
        // We need to create a temporary connection object with the decrypted password or SSHKey
        var tempConnection = new RemoteConnection
            {
                Host = RemoteConnectionModel.Host,
                Port = RemoteConnectionModel.Port,
                Username = RemoteConnectionModel.Username,
                AuthenticationMethod = RemoteConnectionModel.AuthenticationMethod
            };

        string password = Password;
        string sshKey = SSHKey;

        if (IsEditMode)
        {
            var protector = DataProtectionProvider.CreateProtector("RemoteConnectionProtector");
            if (string.IsNullOrEmpty(Password) && RemoteConnectionModel.AuthenticationMethod ==
            RemoteConnection.AuthMethod.Password)
            {
                if (string.IsNullOrEmpty(RemoteConnectionModel.Password))
                {
                    throw new InvalidOperationException("Password is not set.");
                }
                password = protector.Unprotect(RemoteConnectionModel.Password);
            }
            if (string.IsNullOrEmpty(SSHKey) && RemoteConnectionModel.AuthenticationMethod == RemoteConnection.AuthMethod.SSHKey)
            {
                if (string.IsNullOrEmpty(RemoteConnectionModel.SSHKey))
                {
                    throw new InvalidOperationException("SSH Key is not set.");
                }
                sshKey = protector.Unprotect(RemoteConnectionModel.SSHKey);
            }
        }

        var success = await RemoteConnectionService.ValidateSSHConnection(tempConnection, password, sshKey);
        return success;
    }
}
