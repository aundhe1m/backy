@using Backy.Models
@using Microsoft.AspNetCore.Components
@using Microsoft.Extensions.Logging
@inject ILogger<NewDriveCard> Logger
@inject NavigationManager Navigation

<div class="card drive-card mb-3">
    <!-- Card Header -->
    <div class="card-header d-flex justify-content-between align-items-center"
        style="background-color:@HeaderBackgroundColor; color:@HeaderTextColor;">
        <div class="d-flex align-items-center">
            <!-- Expand/Collapse button -->
            <button class="btn btn-link p-0 me-2 chevron-button" @onclick="ToggleDetails">
                <img src="/icons/chevron-down.svg" alt="Expand Details"
                    class="chevron-icon @(IsDriveCardDetailsVisible ? "rotated" : "")" style="height: 24px;" />
            </button>
            <!-- Drive Icon -->
            <img src="@DriveIcon" alt="Drive Icon" style="height: 24px; margin-right: 8px;" />
            <span>@(string.IsNullOrEmpty(Model.Name) ? "Unnamed Drive" : Model.Name)</span>
        </div>
        <!-- Action Buttons -->
        <div class="btn-group">
            @if (ShowProtectButton)
            {
                <button type="button" class="btn btn-transparent protect-drive-button"
                    @onclick="() => ProtectDrive(Model.Serial)" title="Protect Drive">
                    <img src="/icons/shield-lock.svg" alt="Protect Drive" style="height: 24px;" />
                </button>
            }
            @if (ShowSelectButton)
            {
                <button type="button" class="btn btn-transparent select-drive-button"
                    @onclick="() => SelectDrive(Model.Serial)" title="Select Drive">
                    <img src="/icons/plus-square.svg" alt="Select Drive" style="height: 24px;" />
                </button>
            }
            @if (ShowUnprotectButton)
            {
                <button type="button" class="btn btn-transparent unprotect-drive-button"
                    @onclick="() => UnprotectDrive(Model.Serial)" title="Remove Protection">
                    <img src="/icons/shield-slash.svg" alt="Unprotect Drive" style="height: 24px;" />
                </button>
            }
        </div>
    </div>
    <!-- Drive Details -->
    @if (IsDriveCardDetailsVisible)
    {
        <div class="card-body">
            <!-- Drive Details Table -->
            <div class="table-responsive">
                <table class="table table-striped">
                    <tbody>
                        <tr>
                            <th>Vendor</th>
                            <td>@Model.Vendor</td>
                        </tr>
                        <tr>
                            <th>Model</th>
                            <td>@Model.Model</td>
                        </tr>
                        <tr>
                            <th>Serial</th>
                            <td>@Model.Serial</td>
                        </tr>
                        <tr>
                            <th>Size</th>
                            <td>@FormatSize(Model.Size)</td>
                        </tr>
                        @if (Model.Partitions != null && Model.Partitions.Any())
                        {
                            <tr>
                                <th>Partitions</th>
                                <td>
                                    @foreach (var partition in Model.Partitions)
                                    {
                                        <div>@partition.Name - @partition.Fstype</div>
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    }
</div>

@code {
    [Parameter, EditorRequired]
    public Drive Model { get; set; } = default!;

    [Parameter]
    public bool ShowProtectButton { get; set; } = true;

    [Parameter]
    public bool ShowSelectButton { get; set; } = true;

    [Parameter]
    public bool ShowUnprotectButton { get; set; } = false;

    [Parameter]
    public EventCallback<string> OnProtect { get; set; }

    [Parameter]
    public EventCallback<string> OnSelect { get; set; }

    [Parameter]
    public EventCallback<string> OnUnprotect { get; set; }

    private bool IsDriveCardDetailsVisible { get; set; } = false;
    private string HeaderBackgroundColor { get; set; } = "#343a40"; // Default dark
    private string HeaderTextColor { get; set; } = "white";
    private string DriveIcon { get; set; } = "/icons/hdd.svg";
    protected override void OnParametersSet()
    {
        // Customize header based on drive state
        if (!Model.IsConnected)
        {
            HeaderBackgroundColor = "#d3d3d3"; // Light gray
            HeaderTextColor = "black";
        }
        else if (Model.IsConnected && !Model.IsMounted)
        {
            HeaderBackgroundColor = "#add8e6"; // Light blue
            HeaderTextColor = "black";
        }
        else
        {
            HeaderBackgroundColor = "#90ee90"; // Light green
            HeaderTextColor = "black";
        }
        DriveIcon = "/icons/hdd.svg";
    }

    private void ToggleDetails()
    {
        IsDriveCardDetailsVisible = !IsDriveCardDetailsVisible;
    }

    private async Task ProtectDrive(string serial)
    {
        await OnProtect.InvokeAsync(serial);
    }

    private async Task SelectDrive(string serial)
    {
        await OnSelect.InvokeAsync(serial);
    }

    private async Task UnprotectDrive(string serial)
    {
        await OnUnprotect.InvokeAsync(serial);
    }

    private string FormatSize(long sizeInBytes)
    {
        if (sizeInBytes < 1024)
            return $"{sizeInBytes} B";
        else if (sizeInBytes < 1024 * 1024)
            return $"{(sizeInBytes / 1024.0):F2} KB";
        else if (sizeInBytes < 1024 * 1024 * 1024)
            return $"{(sizeInBytes / (1024.0 * 1024.0)):F2} MB";
        else
            return $"{(sizeInBytes / (1024.0 * 1024.0 * 1024.0)):F2} GB";
    }
}
