@using Backy.Models
@using Backy.Services
@inject ICustomToastService ToastService
@implements IDisposable

<div class="toast-container position-fixed bottom-0 end-0 p-3" style="z-index: 1200;">
    @foreach (var toast in toasts)
    {
        <div class="toast show align-items-center text-white @GetToastBackground(toast.Level)" role="alert"
            aria-live="assertive" aria-atomic="true">
            <div class="d-flex">
                <div class="toast-body">
                    <strong>@toast.Title</strong><br />
                    @toast.Message
                </div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" aria-label="Close"
                    @onclick="() => RemoveToast(toast)"></button>
            </div>
        </div>
    }
</div>

@code {
    private List<ToastMessage> toasts = new List<ToastMessage>();

    protected override void OnInitialized()
    {
        ToastService.OnShow += ShowToast;
    }

    private void ShowToast(ToastMessage toast)
    {
        toasts.Add(toast);
        InvokeAsync(StateHasChanged);

        // Automatically remove the toast after 5 seconds
        _ = Task.Run(async () =>
        {
            await Task.Delay(5000);
            RemoveToast(toast);
        });
    }

    private void RemoveToast(ToastMessage toast)
    {
        if (toasts.Contains(toast))
        {
            toasts.Remove(toast);
            InvokeAsync(StateHasChanged);
        }
    }

    private string GetToastBackground(ToastLevel level)
    {
        return level switch
        {
            ToastLevel.Success => "bg-success",
            ToastLevel.Error => "bg-danger",
            ToastLevel.Warning => "bg-warning text-dark",
            ToastLevel.Info => "bg-info",
            _ => "bg-secondary"
        };
    }

    public void Dispose()
    {
        ToastService.OnShow -= ShowToast;
    }
}
