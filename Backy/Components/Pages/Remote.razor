@* @page "/Remote"
@using Backy.Data
@using Backy.Models
@using Backy.Services
@using Microsoft.AspNetCore.DataProtection
@inject ApplicationDbContext DbContext
@inject ICustomToastService ToastService
@inject ILogger<Remote> Logger
@inject IDataProtectionProvider DataProtectionProvider

<head>
<title>Remote - Backy</title>
</head>

<div class="d-flex justify-content-between align-items-center mb-4">
<h1>Remote Management</h1>
<button class="btn btn-primary" @onclick="OpenAddModal">Add New Remote Connection</button>
</div>

<!-- Remote Management Content -->
<div class="card mb-3">
<div class="card-header">
<h5>Manage Remote Connections</h5>
</div>
<div class="card-body">
<!-- Example Content: List of Remote Connections -->
<table class="table table-striped">
<thead>
<tr>
<th>Name</th>
<th>Host</th>
<th>Port</th>
<th>Username</th>
<th>Authentication Method</th>
<th>Remote Path</th>
<th>Status</th>
<th>Actions</th>
</tr>
</thead>
<tbody>
@foreach (var remote in Remotes)
{
<tr>
<td>@remote.Name</td>
<td>@remote.Host</td>
<td>@remote.Port</td>
<td>@remote.Username</td>
<td>@remote.AuthenticationMethod</td>
<td>@remote.RemotePath</td>
<td>
@if (remote.IsEnabled)
{
<span class="badge bg-success">Enabled</span>
}
else
{
<span class="badge bg-secondary">Disabled</span>
}
</td>
<td>
<button class="btn btn-sm btn-primary me-1"
@onclick="() => OpenEditModal(remote.Id)">Edit</button>
<button class="btn btn-sm btn-danger me-1"
@onclick="() => DeleteRemote(remote.Id)">Delete</button>
<button class="btn btn-sm btn-warning" @onclick="() => ToggleEnable(remote.Id)">
@if (remote.IsEnabled)
{
<span>Disable</span>
}
else
{
<span>Enable</span>
}
</button>
</td>
</tr>
}
</tbody>
</table>
</div>
</div>

<!-- Add/Edit Remote Modal -->
@if (isModalOpen)
{
<Modal Title="@modalTitle" Visible="isModalOpen" VisibleChanged="@(v => isModalOpen = v)">
<EditForm Model="@CurrentRemote" OnValidSubmit="HandleValidSubmit">
<DataAnnotationsValidator />
<ValidationSummary />

<InputHidden @bind-Value="CurrentRemote.Id" />

<div class="mb-3">
<label for="remoteName" class="form-label">Name</label>
<InputText id="remoteName" class="form-control" @bind-Value="CurrentRemote.Name" required />
<ValidationMessage For="@(() => CurrentRemote.Name)" />
</div>
<div class="mb-3">
<label for="remoteHost" class="form-label">Host</label>
<InputText id="remoteHost" class="form-control" @bind-Value="CurrentRemote.Host" required />
<ValidationMessage For="@(() => CurrentRemote.Host)" />
</div>
<div class="mb-3">
<label for="remotePort" class="form-label">Port</label>
<InputNumber id="remotePort" class="form-control" @bind-Value="CurrentRemote.Port" required />
<ValidationMessage For="@(() => CurrentRemote.Port)" />
</div>
<div class="mb-3">
<label for="remoteUsername" class="form-label">Username</label>
<InputText id="remoteUsername" class="form-control" @bind-Value="CurrentRemote.Username" required />
<ValidationMessage For="@(() => CurrentRemote.Username)" />
</div>
<div class="mb-3">
<label for="authMethod" class="form-label">Authentication Method</label>
<InputSelect id="authMethod" class="form-control" @bind-Value="CurrentRemote.AuthenticationMethod" required>
<option value="">Select Authentication Method</option>
<option value="Password">Password</option>
<option value="SSH Key">SSH Key</option>
</InputSelect>
<ValidationMessage For="@(() => CurrentRemote.AuthenticationMethod)" />
</div>
@if (ShowPasswordField)
{
<div class="mb-3">
<label for="remotePassword" class="form-label">Password</label>
<InputText id="remotePassword" type="password" class="form-control" @bind-Value="CurrentRemote.Password" />
<ValidationMessage For="@(() => CurrentRemote.Password)" />
</div>
}
@if (ShowSSHKeyField)
{
<div class="mb-3">
<label for="remoteSSHKey" class="form-label">SSH Key</label>
<InputTextArea id="remoteSSHKey" class="form-control" @bind-Value="CurrentRemote.SSHKey"></InputTextArea>
<ValidationMessage For="@(() => CurrentRemote.SSHKey)" />
</div>
}
<div class="mb-3">
<label for="remotePath" class="form-label">Remote Path</label>
<InputText id="remotePath" class="form-control" @bind-Value="CurrentRemote.RemotePath" required />
<ValidationMessage For="@(() => CurrentRemote.RemotePath)" />
</div>

<div class="modal-footer">
<button type="button" class="btn btn-secondary" @onclick="CloseModal">Close</button>
<button type="submit" class="btn btn-primary">@modalSubmitButtonText</button>
</div>
</EditForm>
</Modal>
}

@code {
private List<RemoteScan> Remotes { get; set; } = new List<RemoteScan>();

// Modal state
private bool isModalOpen = false;
private string modalTitle = "Add New Remote Connection";
private string modalSubmitButtonText = "Add";
private RemoteScan CurrentRemote { get; set; } = new RemoteScan();

// Authentication Fields Visibility
private bool ShowPasswordField => CurrentRemote.AuthenticationMethod == "Password";
private bool ShowSSHKeyField => CurrentRemote.AuthenticationMethod == "SSH Key";

// Data Protector
private IDataProtector Protector { get; set; }

protected override async Task OnInitializedAsync()
{
Protector = DataProtectionProvider.CreateProtector("RemoteConnectionProtector");
await LoadRemotes();
}

private async Task LoadRemotes()
{
try
{
Remotes = await DbContext.RemoteScans.ToListAsync();
}
catch (Exception ex)
{
Logger.LogError(ex, "Error loading remote connections.");
ToastService.ShowError("Failed to load remote connections.");
}
}

private void OpenAddModal()
{
CurrentRemote = new RemoteScan();
modalTitle = "Add New Remote Connection";
modalSubmitButtonText = "Add";
isModalOpen = true;
}

private void OpenEditModal(Guid id)
{
var remote = Remotes.FirstOrDefault(r => r.Id == id);
if (remote != null)
{
CurrentRemote = new RemoteScan
{
Id = remote.Id,
Name = remote.Name,
Host = remote.Host,
Port = remote.Port,
Username = remote.Username,
AuthenticationMethod = remote.AuthenticationMethod,
Password = remote.Password != null ? "********" : "",
SSHKey = remote.SSHKey != null ? "********" : "",
RemotePath = remote.RemotePath
};
modalTitle = "Edit Remote Connection";
modalSubmitButtonText = "Save Changes";
isModalOpen = true;
}
}

private void CloseModal()
{
isModalOpen = false;
}

private async Task HandleValidSubmit()
{
// Custom validation for authentication method
if (CurrentRemote.AuthenticationMethod == "Password")
{
if (string.IsNullOrWhiteSpace(CurrentRemote.Password) || CurrentRemote.Password == "********")
{
ToastService.ShowError("Password is required for Password authentication.");
return;
}
}
else if (CurrentRemote.AuthenticationMethod == "SSH Key")
{
if (string.IsNullOrWhiteSpace(CurrentRemote.SSHKey) || CurrentRemote.SSHKey == "********")
{
ToastService.ShowError("SSH Key is required for SSH Key authentication.");
return;
}
}
else
{
ToastService.ShowError("Invalid Authentication Method.");
return;
}

try
{
if (CurrentRemote.Id == Guid.Empty)
{
// Encrypt sensitive data
if (CurrentRemote.AuthenticationMethod == "Password")
{
CurrentRemote.Password = Protector.Protect(CurrentRemote.Password);
}
else if (CurrentRemote.AuthenticationMethod == "SSH Key")
{
CurrentRemote.SSHKey = Protector.Protect(CurrentRemote.SSHKey);
}

// Validate connection
bool isValid = ValidateConnection(CurrentRemote);
if (!isValid)
{
ToastService.ShowError("Unable to connect with the provided details.");
return;
}

// Add new RemoteScan
DbContext.RemoteScans.Add(CurrentRemote);
await DbContext.SaveChangesAsync();
// Enqueue indexing if needed
// IndexingQueue.EnqueueIndexing(CurrentRemote.Id);
await LoadRemotes();
ToastService.ShowSuccess("Remote connection added successfully.");
}
else
{
// Edit existing RemoteScan
var existing = await DbContext.RemoteScans.FindAsync(CurrentRemote.Id);
if (existing != null)
{
existing.Name = CurrentRemote.Name;
existing.Host = CurrentRemote.Host;
existing.Port = CurrentRemote.Port;
existing.Username = CurrentRemote.Username;
existing.AuthenticationMethod = CurrentRemote.AuthenticationMethod;
existing.RemotePath = CurrentRemote.RemotePath;

if (CurrentRemote.AuthenticationMethod == "Password" && CurrentRemote.Password != "********")
{
existing.Password = Protector.Protect(CurrentRemote.Password);
}
else if (CurrentRemote.AuthenticationMethod == "SSH Key" && CurrentRemote.SSHKey != "********")
{
existing.SSHKey = Protector.Protect(CurrentRemote.SSHKey);
}

// Validate connection
bool isValid = ValidateConnection(existing);
if (!isValid)
{
ToastService.ShowError("Unable to connect with the provided details.");
return;
}

await DbContext.SaveChangesAsync();
// Enqueue indexing if needed
// IndexingQueue.EnqueueIndexing(existing.Id);
await LoadRemotes();
ToastService.ShowSuccess("Remote connection updated successfully.");
}
}

isModalOpen = false;
}
catch (Exception ex)
{
Logger.LogError(ex, "Error saving remote connection.");
ToastService.ShowError("Failed to save remote connection.");
}
}

private bool ValidateConnection(RemoteScan storage)
{
try
{
using var client = CreateSftpClient(storage);
client.Connect();
bool isConnected = client.IsConnected;
client.Disconnect();
return isConnected;
}
catch (Exception ex)
{
Logger.LogError(ex, "Connection validation failed for storage: {Name}", storage.Name);
return false;
}
}

private SftpClient CreateSftpClient(RemoteScan storage)
{
if (storage.AuthenticationMethod == "Password")
{
return new SftpClient(storage.Host, storage.Port, storage.Username, Protector.Unprotect(storage.Password ?? ""));
}
else
{
using var keyStream = new MemoryStream(System.Text.Encoding.UTF8.GetBytes(Protector.Unprotect(storage.SSHKey ?? "")));
var keyFile = new PrivateKeyFile(keyStream);
var keyFiles = new[] { keyFile };
var authMethod = new PrivateKeyAuthenticationMethod(storage.Username, keyFiles);
var connectionInfo = new Renci.SshNet.ConnectionInfo(storage.Host, storage.Port, storage.Username, authMethod);
return new SftpClient(connectionInfo);
}
}

private async Task DeleteRemote(Guid id)
{
try
{
var remote = await DbContext.RemoteScans.FindAsync(id);
if (remote != null)
{
DbContext.RemoteScans.Remove(remote);
await DbContext.SaveChangesAsync();
await LoadRemotes();
ToastService.ShowSuccess("Remote connection deleted successfully.");
}
else
{
ToastService.ShowError("Remote connection not found.");
}
}
catch (Exception ex)
{
Logger.LogError(ex, "Error deleting remote connection.");
ToastService.ShowError("Failed to delete remote connection.");
}
}

private async Task ToggleEnable(Guid id)
{
try
{
var remote = await DbContext.RemoteScans.FindAsync(id);
if (remote != null)
{
remote.IsEnabled = !remote.IsEnabled;
await DbContext.SaveChangesAsync();
await LoadRemotes();
string status = remote.IsEnabled ? "enabled" : "disabled";
ToastService.ShowSuccess($"Remote connection {status} successfully.");
}
else
{
ToastService.ShowError("Remote connection not found.");
}
}
catch (Exception ex)
{
Logger.LogError(ex, "Error toggling remote connection status.");
ToastService.ShowError("Failed to toggle remote connection status.");
}
}

private async Task OpenEditModal(Guid id)
{
var remote = Remotes.FirstOrDefault(r => r.Id == id);
if (remote != null)
{
CurrentRemote = new RemoteScan
{
Id = remote.Id,
Name = remote.Name,
Host = remote.Host,
Port = remote.Port,
Username = remote.Username,
AuthenticationMethod = remote.AuthenticationMethod,
Password = remote.Password != null ? "********" : "",
SSHKey = remote.SSHKey != null ? "********" : "",
RemotePath = remote.RemotePath
};
modalTitle = "Edit Remote Connection";
modalSubmitButtonText = "Save Changes";
isModalOpen = true;
}
}
} *@
