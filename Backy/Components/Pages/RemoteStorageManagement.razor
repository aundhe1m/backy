@page "/RemoteStorageManagement"
@using Backy.Models
@using Backy.Helpers
@inject ApplicationDbContext DbContext
@inject ILogger<RemoteStorageManagement> Logger
@inject NavigationManager NavigationManager
@inject ToastService ToastService
@inject IDataProtectionProvider DataProtectionProvider
@inject IRemoteConnectionService RemoteConnectionService
@inject ILoadingService LoadingService
@inject ITimeZoneService TimeZoneService
@rendermode InteractiveServer

<PageTitle>Remote Storage Management - Backy</PageTitle>

<!-- Header Section -->
<div class="d-flex justify-content-between align-items-center mb-4">
    <h1>Remote Storage Management</h1>

    <!-- Add Remote Connection Button -->
    <button class="btn btn-primary" @onclick="OpenAddRemoteConnectionModal">
        <img src="/icons/plus-square.svg" alt="Add Remote Connection" style="height: 24px;" class="theme-icon" />
        Add Remote Connection
    </button>
</div>

<!-- Remote Connection Cards -->
@if (RemoteConnections != null && RemoteConnections.Any())
{
    @foreach (var connection in RemoteConnections)
    {
        <RemoteConnectionCard Model="@connection" OnDelete="@(() => DeleteConnection(connection.RemoteConnectionId))"
    OnEdit="@EditConnection" OnToggleEnable="@(() => ToggleEnableConnection(connection.RemoteConnectionId))"
    OnScanNow="@(() => ScanNowConnection(connection.RemoteConnectionId))"
    OnRefresh="@(() => RefreshConnection(connection.RemoteConnectionId))" />

    }
}
else
{
    <p>No remote connections found.</p>
}

<!-- Modals -->
<RemoteConnectionWizard @ref="wizard" OnFinished="OnConnectionAdded" />

<RemoteModalSSHDetails @ref="editSSHDetailsModal" IsEditMode="true" RemoteConnectionModel="EditingConnection"
    OnSaved="OnConnectionEdited" />

<RemoteModalPathSelection @ref="editPathModal" IsEditMode="true" RemoteConnectionModel="EditingConnection"
    OnSaved="OnConnectionEdited" />

<RemoteModalFilters @ref="editFiltersModal" IsEditMode="true" RemoteConnectionModel="EditingConnection"
    OnSaved="OnConnectionEdited" />

<RemoteModalSchedule @ref="editScheduleModal" IsEditMode="true" RemoteConnectionModel="EditingConnection"
    OnSaved="@(startScan => OnConnectionEdited(startScan))" />


@code {
    // Properties
    private List<RemoteConnection> RemoteConnections { get; set; } = new List<RemoteConnection>();
    private RemoteConnection RemoteConnectionModel { get; set; } = new RemoteConnection();
    private RemoteConnection EditingConnection { get; set; } = new RemoteConnection();

    private RemoteConnectionWizard wizard = default!;
    private RemoteModalSSHDetails editSSHDetailsModal = default!;
    private RemoteModalPathSelection editPathModal = default!;
    private RemoteModalFilters editFiltersModal = default!;
    private RemoteModalSchedule editScheduleModal = default!;


    // Lifecycle Methods
    protected override async Task OnInitializedAsync()
    {
        await LoadRemoteConnections();
    }

    private async Task LoadRemoteConnections()
    {
        RemoteConnections = await DbContext.RemoteConnections
        .Include(rc => rc.ScanSchedules)
        .Include(rc => rc.Filters)
        .AsSplitQuery()
        .ToListAsync();
    }

    // Event Handlers
    private async Task OpenAddRemoteConnectionModal()
    {
        await wizard.ShowAsync();
    }

    private async Task OnConnectionAdded(RemoteConnection newConnection)
    {
        // Save the new connection
        DbContext.RemoteConnections.Add(newConnection);
        await DbContext.SaveChangesAsync();
        await LoadRemoteConnections();
        ToastService.Notify(new ToastMessage(ToastType.Success, "Remote Connection created successfully."));

        // Optionally start scanning
        await RemoteConnectionService.StartScan(newConnection.RemoteConnectionId);
        ToastService.Notify(new ToastMessage(ToastType.Success, "Scan started."));
    }

    private async Task EditConnection(EditEventArgs args)
    {
        EditingConnection = await DbContext.RemoteConnections
        .Include(rc => rc.ScanSchedules)
        .Include(rc => rc.Filters)
        .FirstOrDefaultAsync(rc => rc.RemoteConnectionId == args.RemoteConnectionId);

        if (EditingConnection != null)
        {
            switch (args.Step)
            {
                case 1:
                    await editSSHDetailsModal.ShowAsync();
                    break;
                case 2:
                    await editPathModal.ShowAsync();
                    break;
                case 3:
                    await editFiltersModal.ShowAsync();
                    break;
                case 4:
                    await editScheduleModal.ShowAsync();
                    break;
                default:
                    break;
            }
        }
        else
        {
            ToastService.Notify(new ToastMessage(ToastType.Danger, "Remote Connection not found."));
        }
    }


    private async Task OnConnectionEdited()
    {
        await OnConnectionEdited(false);
    }

    private async Task OnConnectionEdited(bool startScan)
    {
        // Fetch the existing connection
        var existingConnection = await DbContext.RemoteConnections
        .Include(rc => rc.ScanSchedules)
        .Include(rc => rc.Filters)
        .FirstOrDefaultAsync(rc => rc.RemoteConnectionId == EditingConnection.RemoteConnectionId);

        if (existingConnection != null)
        {
            // Update simple properties
            existingConnection.Name = EditingConnection.Name;
            existingConnection.Host = EditingConnection.Host;
            existingConnection.Port = EditingConnection.Port;
            existingConnection.Username = EditingConnection.Username;
            existingConnection.AuthenticationMethod = EditingConnection.AuthenticationMethod;
            existingConnection.Password = EditingConnection.Password;
            existingConnection.SSHKey = EditingConnection.SSHKey;
            existingConnection.RemotePath = EditingConnection.RemotePath;

            // Update Filters
            DbContext.RemoteFilters.RemoveRange(existingConnection.Filters);
            existingConnection.Filters.Clear();
            foreach (var filter in EditingConnection.Filters)
            {
                filter.RemoteConnectionId = existingConnection.RemoteConnectionId;
                existingConnection.Filters.Add(filter);
            }

            // Update ScanSchedules
            DbContext.RemoteScanSchedules.RemoveRange(existingConnection.ScanSchedules);
            existingConnection.ScanSchedules.Clear();
            foreach (var schedule in EditingConnection.ScanSchedules)
            {
                schedule.RemoteConnectionId = existingConnection.RemoteConnectionId;
                existingConnection.ScanSchedules.Add(schedule);
            }

            await DbContext.SaveChangesAsync();
            await LoadRemoteConnections();
            ToastService.Notify(new ToastMessage(ToastType.Success, "Remote Connection updated successfully."));

            if (startScan)
            {
                await RemoteConnectionService.StartScan(existingConnection.RemoteConnectionId);
                ToastService.Notify(new ToastMessage(ToastType.Success, "Scan started."));
            }
        }
    }


    private async Task DeleteConnection(Guid remoteConnectionId)
    {
        var connection = await DbContext.RemoteConnections.FindAsync(remoteConnectionId);
        if (connection != null)
        {
            DbContext.RemoteConnections.Remove(connection);
            await DbContext.SaveChangesAsync();
            await LoadRemoteConnections();
            ToastService.Notify(new ToastMessage(ToastType.Success, "Remote Connection deleted successfully."));
        }
    }

    private async Task ToggleEnableConnection(Guid remoteConnectionId)
    {
        var connection = await DbContext.RemoteConnections.FindAsync(remoteConnectionId);
        if (connection != null)
        {
            connection.IsEnabled = !connection.IsEnabled;
            await DbContext.SaveChangesAsync();
            await LoadRemoteConnections();
        }
    }

    private async Task ScanNowConnection(Guid remoteConnectionId)
    {
        await RemoteConnectionService.StartScan(remoteConnectionId);
        ToastService.Notify(new ToastMessage(ToastType.Success, "Scan started."));
    }

    private async Task RefreshConnection(Guid remoteConnectionId)
    {
        // Fetch the latest data from the database, including summary properties
        var updatedConnection = await DbContext.RemoteConnections
        .Include(rc => rc.ScanSchedules)
        .Include(rc => rc.Filters)
        .FirstOrDefaultAsync(rc => rc.RemoteConnectionId == remoteConnectionId);

        if (updatedConnection != null)
        {
            var index = RemoteConnections.FindIndex(rc => rc.RemoteConnectionId == remoteConnectionId);
            if (index >= 0)
            {
                RemoteConnections[index] = updatedConnection!;
                StateHasChanged();
            }
        }
    }
}
