@page "/RemoteStorageManagement"
@using Backy.Models
@using Backy.Helpers
@using System.Text
@inject ApplicationDbContext DbContext
@inject ILogger<RemoteStorageManagement> Logger
@inject NavigationManager NavigationManager
@inject ToastService ToastService
@inject IDataProtectionProvider DataProtectionProvider
@inject IRemoteConnectionService RemoteConnectionService
@inject ILoadingService LoadingService
@inject ITimeZoneService TimeZoneService
@inject ConnectionEventService ConnectionEventService
@implements IDisposable
@rendermode InteractiveServer

<PageTitle>Remote Storage Management - Backy</PageTitle>

<!-- Header Section -->
<div class="d-flex justify-content-between align-items-center mb-4">
    <h1>Remote Storage Management</h1>

    <!-- Add Remote Connection Button -->
    <button class="btn btn-primary" @onclick="OpenAddRemoteConnectionModal">
        <img src="/icons/plus-square.svg" alt="Add Remote Connection" style="height: 24px;" class="theme-icon" />
        Add Remote Connection
    </button>
</div>

<!-- Remote Connection Cards -->
@if (RemoteConnections != null && RemoteConnections.Any())
{
    @foreach (var connection in RemoteConnections)
    {
        <RemoteConnectionCard Model="@connection" OnDelete="@(() => DeleteConnection(connection.RemoteConnectionId))"
    OnEdit="@EditConnection" OnToggleEnable="@(() => ToggleEnableConnection(connection.RemoteConnectionId))"
    OnScanNow="@(() => ScanNowConnection(connection.RemoteConnectionId))"
    OnRefresh="@(() => RefreshConnection(connection.RemoteConnectionId))" />

    }
}
else
{
    <p>No remote connections found.</p>
}

<!-- Modals -->
<RemoteConnectionWizard @ref="wizard" OnFinished="OnConnectionAdded" />

<RemoteModalSSHDetails @ref="editSSHDetailsModal" RemoteConnectionModel="EditingConnection"
    OnSaved="OnConnectionEdited" />

<RemoteModalPathSelection @ref="editPathModal" RemoteConnectionModel="EditingConnection" OnSaved="OnConnectionEdited" />

<RemoteModalFilters @ref="editFiltersModal" RemoteConnectionModel="EditingConnection" OnSaved="OnFiltersEdited" />

<RemoteModalSchedule @ref="editScheduleModal" RemoteConnectionModel="EditingConnection"
    OnSaved="@(startScan => OnConnectionEdited(startScan))" />


@code {
    // Properties
    private List<RemoteConnection> RemoteConnections { get; set; } = new List<RemoteConnection>();
    private RemoteConnection RemoteConnectionModel { get; set; } = new RemoteConnection();
    private RemoteConnection EditingConnection { get; set; } = new RemoteConnection();

    private RemoteConnectionWizard wizard = default!;
    private RemoteModalSSHDetails editSSHDetailsModal = default!;
    private RemoteModalPathSelection editPathModal = default!;
    private RemoteModalFilters editFiltersModal = default!;
    private RemoteModalSchedule editScheduleModal = default!;


    // Lifecycle Methods
    protected override async Task OnInitializedAsync()
    {
        // Subscribe to the event so we know when connections have changed
        ConnectionEventService.ConnectionUpdated += OnConnectionUpdated;
        await LoadRemoteConnections();
    }

    // This is called whenever the RemoteConnectionService triggers "NotifyConnectionUpdated(...)"
    private async void OnConnectionUpdated(Guid remoteConnectionId)
    {
        await InvokeAsync(async () =>
        {
            try
            {
                Logger.Log(LogLevel.Information, "Refreshing connection after push event.");
                await LoadRemoteConnections();
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error refreshing connection after push event.");
            }
        });
    }


    public void Dispose()
    {
        ConnectionEventService.ConnectionUpdated -= OnConnectionUpdated;
    }

    private async Task LoadRemoteConnections()
    {
        DbContext.ChangeTracker.Clear(); // Clear the change tracker to avoid stale data
        RemoteConnections = await DbContext.RemoteConnections
        .Include(rc => rc.ScanSchedules)
        .Include(rc => rc.Filters)
        .AsSplitQuery()
        .ToListAsync();
    }


    // Event Handlers
    private async Task OpenAddRemoteConnectionModal()
    {
        await wizard.ShowAsync();
    }

    private async Task OnConnectionAdded((RemoteConnection connection, bool startScan) result)
    {
        var newConnection = result.connection;
        var startScan = result.startScan;

        // Save the new connection
        DbContext.RemoteConnections.Add(newConnection);
        await DbContext.SaveChangesAsync();
        await LoadRemoteConnections();
        ToastService.Notify(new ToastMessage(ToastType.Success, "Remote Connection created successfully."));

        // Optionally start scanning
        if (startScan)
        {
            await RemoteConnectionService.StartScan(newConnection.RemoteConnectionId);
            ToastService.Notify(new ToastMessage(ToastType.Success, "Scan started."));
        }
    }

    private async Task EditConnection(EditEventArgs args)
    {
        var connection = await DbContext.RemoteConnections
        .Include(rc => rc.ScanSchedules)
        .Include(rc => rc.Filters)
        .FirstOrDefaultAsync(rc => rc.RemoteConnectionId == args.RemoteConnectionId);

        if (connection != null)
        {
            // Ensure the Password and SSHKey are loaded
            await DbContext.Entry(connection).ReloadAsync();

            EditingConnection = connection;
        }
        else
        {
            ToastService.Notify(new ToastMessage(ToastType.Danger, "Connection not found."));
            return;
        }

        switch (args.Step)
        {
            case 1:
                await editSSHDetailsModal.ShowAsync();
                break;
            case 2:
                await editPathModal.ShowAsync();
                break;
            case 3:
                await editFiltersModal.ShowAsync();
                break;
            case 4:
                await editScheduleModal.ShowAsync();
                break;
            default:
                break;
        }
    }

    private async Task OnConnectionEdited()
    {
        await OnConnectionEdited(false);
    }

    private async Task OnConnectionEdited(bool startScan)
    {
        // Fetch the existing connection
        var existingConnection = await DbContext.RemoteConnections
        .Include(rc => rc.ScanSchedules)
        .Include(rc => rc.Filters)
        .FirstOrDefaultAsync(rc => rc.RemoteConnectionId == EditingConnection.RemoteConnectionId);

        if (existingConnection != null)
        {
            var protector = DataProtectionProvider.CreateProtector("RemoteConnectionProtector");

            // Update simple properties
            existingConnection.Name = EditingConnection.Name;
            existingConnection.Host = EditingConnection.Host;
            existingConnection.Port = EditingConnection.Port;
            existingConnection.Username = EditingConnection.Username;
            existingConnection.AuthenticationMethod = EditingConnection.AuthenticationMethod;
            existingConnection.RemotePath = EditingConnection.RemotePath;

            // Update password or SSHKey if provided
            if (EditingConnection.AuthenticationMethod == RemoteConnection.AuthMethod.Password)
            {
                if (!string.IsNullOrEmpty(EditingConnection.Password))
                {
                    existingConnection.Password = EditingConnection.Password;
                }
                existingConnection.SSHKey = null;
            }
            else if (EditingConnection.AuthenticationMethod == RemoteConnection.AuthMethod.SSHKey)
            {
                if (!string.IsNullOrEmpty(EditingConnection.SSHKey))
                {
                    existingConnection.SSHKey = EditingConnection.SSHKey;
                }
                existingConnection.Password = null;
            }

            // Update Filters
            await UpdateFiltersAsync(existingConnection, EditingConnection.Filters);

            // Update ScanSchedules
            await UpdateScanSchedulesAsync(existingConnection, EditingConnection.ScanSchedules);

            await DbContext.SaveChangesAsync();
            await LoadRemoteConnections();
            ToastService.Notify(new ToastMessage(ToastType.Success, "Remote Connection updated successfully."));

            if (startScan)
            {
                await RemoteConnectionService.StartScan(existingConnection.RemoteConnectionId);
                ToastService.Notify(new ToastMessage(ToastType.Success, "Scan started."));
            }
        }
    }

    private async Task UpdateFiltersAsync(RemoteConnection existingConnection, List<RemoteFilter> updatedFilters)
    {
        // Load existing filters
        await DbContext.Entry(existingConnection).Collection(c => c.Filters).LoadAsync();

        // Find filters to remove
        var filtersToRemove = existingConnection.Filters
        .Where(ef => !updatedFilters.Any(uf => uf.Id == ef.Id))
        .ToList();

        // Remove filters
        foreach (var filter in filtersToRemove)
        {
            existingConnection.Filters.Remove(filter);
            DbContext.RemoteFilters.Remove(filter);
        }

        // Update existing filters and add new ones
        foreach (var updatedFilter in updatedFilters)
        {
            var existingFilter = existingConnection.Filters.FirstOrDefault(f => f.Id == updatedFilter.Id);
            if (existingFilter != null)
            {
                // Update existing filter
                existingFilter.Pattern = updatedFilter.Pattern;
                existingFilter.IsInclude = updatedFilter.IsInclude;
            }
            else
            {
                // Create a new filter and add it to the existingConnection
                var newFilter = new RemoteFilter
                {
                    Pattern = updatedFilter.Pattern,
                    IsInclude = updatedFilter.IsInclude,
                    RemoteConnectionId = existingConnection.RemoteConnectionId,
                    RemoteConnection = existingConnection
                };
                existingConnection.Filters.Add(newFilter);
            }
        }
    }

    private async Task OnFiltersEdited()
    {
        Logger.Log(LogLevel.Information, "Starting OnFiltersEdited()");
        Logger.Log(LogLevel.Information, EditingConnection.Filters.Aggregate(new StringBuilder(), (acc, next) =>
        acc.AppendLine($"Existing Rule: {next.Pattern}")).ToString());
        var existingConnection = DbContext.RemoteConnections.FirstOrDefault(rc => rc.RemoteConnectionId ==
        EditingConnection.RemoteConnectionId);

        if (existingConnection != null)
        {
            existingConnection.Filters = EditingConnection.Filters;
        }

        await DbContext.SaveChangesAsync();

        Logger.Log(LogLevel.Information, "Ending OnFiltersEdited()");
        Logger.Log(LogLevel.Information, EditingConnection.Filters.Aggregate(new StringBuilder(), (acc, next) =>
        acc.AppendLine($"Existing Rule: {next.Pattern}")).ToString());
    }

    private async Task UpdateScanSchedulesAsync(RemoteConnection existingConnection, ICollection<RemoteScanSchedule>
    updatedSchedules)
    {
        // Load existing schedules
        await DbContext.Entry(existingConnection).Collection(c => c.ScanSchedules).LoadAsync();

        // Find schedules to remove
        var schedulesToRemove = existingConnection.ScanSchedules
        .Where(es => !updatedSchedules.Any(us => us.Id == es.Id))
        .ToList();

        // Remove schedules
        DbContext.RemoteScanSchedules.RemoveRange(schedulesToRemove);

        // Update existing schedules and add new ones
        foreach (var updatedSchedule in updatedSchedules)
        {
            var existingSchedule = existingConnection.ScanSchedules.FirstOrDefault(s => s.Id == updatedSchedule.Id);
            if (existingSchedule != null)
            {
                existingSchedule.SelectedDayMonday = updatedSchedule.SelectedDayMonday;
                existingSchedule.SelectedDayTuesday = updatedSchedule.SelectedDayTuesday;
                existingSchedule.SelectedDayWednesday = updatedSchedule.SelectedDayWednesday;
                existingSchedule.SelectedDayThursday = updatedSchedule.SelectedDayThursday;
                existingSchedule.SelectedDayFriday = updatedSchedule.SelectedDayFriday;
                existingSchedule.SelectedDaySaturday = updatedSchedule.SelectedDaySaturday;
                existingSchedule.SelectedDaySunday = updatedSchedule.SelectedDaySunday;
                existingSchedule.ScheduledTime = updatedSchedule.ScheduledTime;
            }
            else
            {
                updatedSchedule.RemoteConnectionId = existingConnection.RemoteConnectionId;
                DbContext.RemoteScanSchedules.Add(updatedSchedule);
            }
        }
    }

    private async Task DeleteConnection(Guid remoteConnectionId)
    {
        var connection = await DbContext.RemoteConnections.FindAsync(remoteConnectionId);
        if (connection != null)
        {
            DbContext.RemoteConnections.Remove(connection);
            await DbContext.SaveChangesAsync();
            await LoadRemoteConnections();
            ToastService.Notify(new ToastMessage(ToastType.Success, "Remote Connection deleted successfully."));
        }
    }

    private async Task ToggleEnableConnection(Guid remoteConnectionId)
    {
        var connection = await DbContext.RemoteConnections.FindAsync(remoteConnectionId);
        if (connection != null)
        {
            connection.IsEnabled = !connection.IsEnabled;
            await DbContext.SaveChangesAsync();
            await LoadRemoteConnections();
        }
    }

    private async Task ScanNowConnection(Guid remoteConnectionId)
    {
        var result = await RemoteConnectionService.StartScan(remoteConnectionId);
        switch (result)
        {
            case ScanResult.ScanQueued:
                ToastService.Notify(new ToastMessage(ToastType.Success, "Scan queued."));
                break;
            case ScanResult.ScanningOngoing:
                ToastService.Notify(new ToastMessage(ToastType.Info, "Scanning Ongoing."));
                break;
            case ScanResult.ScanAlreadyQueued:
                ToastService.Notify(new ToastMessage(ToastType.Info, "Scan already in queue."));
                break;
        }
    }

    private async Task RefreshConnection(Guid remoteConnectionId)
    {
        // Fetch the latest data from the database, including summary properties
        var updatedConnection = await DbContext.RemoteConnections
        .Include(rc => rc.ScanSchedules)
        .Include(rc => rc.Filters)
        .FirstOrDefaultAsync(rc => rc.RemoteConnectionId == remoteConnectionId);

        if (updatedConnection != null)
        {
            var index = RemoteConnections.FindIndex(rc => rc.RemoteConnectionId == remoteConnectionId);
            if (index >= 0)
            {
                RemoteConnections[index] = updatedConnection!;
                // Reassign the list to force Blazor to detect changes
                RemoteConnections = RemoteConnections.ToList();
                StateHasChanged();
            }
        }
    }

}
