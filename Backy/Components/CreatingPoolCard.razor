@using Backy.Models
@using Backy.Services
@using Backy.Helpers
@inject IAppDriveService AppDriveService
@inject ToastService ToastService
@inject ILogger<CreatingPoolCard> Logger

<div class="card drive-card mb-3">
    <!-- Card Header -->
    <div class="card-header d-flex justify-content-between align-items-center">
        <div class="container">
            <div class="row">
                <!-- Left Section: Pool Icon and Group Label -->
                <div class="col d-flex align-items-center" style="padding-left: 0px;">
                    <div>
                        <button class="btn btn-link p-0 me-2 chevron-button theme-icon" @onclick="ToggleDetails">
                            <img src="/icons/chevron-down.svg" alt="Expand Details"
                                class="chevron-icon @(IsPoolDetailsVisible ? "rotated180" : "nonrotated")"
                                style="height: 24px;" />
                        </button>
                        <!-- Pool Icon and Group Label with Spinner -->
                        <img src="/icons/hdd-rack.svg" alt="Drive Icon" style="height: 24px; margin-right: 8px;"
                            class="theme-icon" />
                        <span>@Model.GroupLabel</span>
                        <Spinner Type="SpinnerType.Grow" Size="SpinnerSize.Small" Color="SpinnerColor.Primary" Class="ms-2" />
                        <Badge Color="BadgeColor.Info" Class="ms-2">Creating</Badge>
                    </div>
                </div>
                <!-- Center Section: Progress Information -->
                <div class="col">
                    <div class="text-center mx-4">
                        <div>Pool creation in progress...</div>
                        <Progress Class="mb-0 mt-1" Height="5">
                            <ProgressBar Width="@CreationProgressPercent" Animated="true" />
                        </Progress>
                    </div>
                </div>
                <!-- Right Section: Cancel Button (Optional) -->
                <div class="col d-inline-flex align-items-center justify-content-end" style="padding-right: 0px;">
                    @if (ShowCancelButton)
                    {
                        <Tooltip Title="Cancel Creation" Color="TooltipColor.Dark" style="padding-left: 12px;">
                            <button class="btn btn-danger" @onclick="CancelPoolCreation">
                                <img src="/icons/x-circle.svg" alt="Cancel" style="height: 24px;" class="theme-icon" />
                            </button>
                        </Tooltip>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Details Section -->
    @if (IsPoolDetailsVisible)
    {
        <div class="card-body">
            <!-- Creation Logs Section -->
            <div class="mb-3">
                <h5>Creation Status</h5>
                <div class="console-output" style="max-height: 300px; overflow-y: auto;">
                    <pre>@string.Join("\n", CreationOutputs)</pre>
                </div>
            </div>

            <!-- Pool Details Table -->
            <div class="table-responsive">
                <table class="table table-striped">
                    <tbody>
                        <tr>
                            <th>Pool Name</th>
                            <td>@Model.GroupLabel</td>
                        </tr>
                        <tr>
                            <th>Creation Status</th>
                            <td>@Model.PoolStatus</td>
                        </tr>
                        <tr>
                            <th>Selected Drives</th>
                            <td>@Model.Drives.Count</td>
                        </tr>
                        <tr>
                            <th>GUID</th>
                            <td>@Model.PoolGroupGuid</td>
                        </tr>
                    </tbody>
                </table>
            </div>

            <!-- Drives List -->
            <h5 class="mt-3">Selected Drives</h5>
            @foreach (var drive in Model.Drives)
            {
                <div class="border rounded p-2 mb-2 d-flex align-items-center">
                    <img src="/icons/hdd.svg" alt="Drive" style="height: 20px; margin-right: 8px;" class="theme-icon" />
                    <div>
                        <div>@drive.Label</div>
                        <small class="text-muted">@drive.Vendor @drive.Model (@SizeFormatter.FormatSize(drive.Size))</small>
                    </div>
                </div>
            }
        </div>
    }
</div>

@code {
    [Parameter, EditorRequired]
    public PoolGroup Model { get; set; } = default!;

    [Parameter]
    public EventCallback<Guid> OnCancelCreation { get; set; }

    [Parameter]
    public EventCallback<Guid> OnCreationComplete { get; set; }

    [Parameter]
    public bool ShowCancelButton { get; set; } = true;

    private bool IsPoolDetailsVisible { get; set; } = false;
    private List<string> CreationOutputs { get; set; } = new List<string>();
    private int CreationProgressPercent { get; set; } = 25; // Default to 25%
    private Timer? refreshTimer;
    private CancellationTokenSource? cancellationTokenSource;
    private int refreshInterval = 2000; // 2 seconds initially

    protected override void OnInitialized()
    {
        // Start polling for updates
        cancellationTokenSource = new CancellationTokenSource();
        StartPolling();
        
        // Start a background task to monitor creation progress with exponential backoff
        _ = Task.Run(() => MonitorPoolCreation(cancellationTokenSource.Token));
    }

    private void StartPolling()
    {
        refreshTimer = new Timer(async _ => 
        {
            await RefreshCreationOutputs();
            await InvokeAsync(StateHasChanged);
        }, null, 0, refreshInterval);
    }

    private async Task RefreshCreationOutputs()
    {
        try
        {
            var result = await AppDriveService.GetPoolOutputsAsync(Model.PoolGroupGuid);
            if (result.Success)
            {
                CreationOutputs = result.Outputs;
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error refreshing pool creation outputs for {PoolGroupGuid}", Model.PoolGroupGuid);
        }
    }

    private async Task MonitorPoolCreation(CancellationToken cancellationToken)
    {
        try
        {
            // Start monitoring with exponential backoff
            var completedPool = await AppDriveService.MonitorPoolCreationWithPollingAsync(Model.PoolGroupGuid, cancellationToken);
            
            if (!cancellationToken.IsCancellationRequested)
            {
                if (completedPool != null)
                {
                    // Pool creation completed successfully
                    CreationProgressPercent = 100;
                    await InvokeAsync(() => ToastService.Notify(new ToastMessage(ToastType.Success, $"Pool {Model.GroupLabel} created successfully!")));
                    await InvokeAsync(() => OnCreationComplete.InvokeAsync(Model.PoolGroupGuid));
                }
                else
                {
                    // Pool creation failed
                    await InvokeAsync(() => ToastService.Notify(new ToastMessage(ToastType.Danger, $"Pool {Model.GroupLabel} creation failed.")));
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error monitoring pool creation for {PoolGroupGuid}", Model.PoolGroupGuid);
            await InvokeAsync(() => ToastService.Notify(new ToastMessage(ToastType.Danger, $"Error monitoring pool creation: {ex.Message}")));
        }
    }

    private void ToggleDetails()
    {
        IsPoolDetailsVisible = !IsPoolDetailsVisible;
    }

    private async Task CancelPoolCreation()
    {
        // Cancel the monitoring task
        cancellationTokenSource?.Cancel();
        
        // Notify the parent
        await OnCancelCreation.InvokeAsync(Model.PoolGroupGuid);
    }

    public void Dispose()
    {
        // Clean up resources
        refreshTimer?.Dispose();
        cancellationTokenSource?.Cancel();
        cancellationTokenSource?.Dispose();
    }
}