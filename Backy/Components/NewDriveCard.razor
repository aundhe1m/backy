@using Backy.Data
@using Backy.Models
@using Backy.Components
@using Backy.Services
@inject ILogger<NewDriveCard> Logger
@inject NavigationManager Navigation

@if (IsNewDriveDetailsVisible)
{
    <div class="card-body">
    <!-- Details Content -->
    <div class="table-responsive">
        <table class="table table-striped">
            <tbody>
                <tr>
                    <th>Vendor</th>
                    <td>@Model.Vendor</td>
                </tr>
                <tr>
                    <th>Model</th>
                    <td>@Model.Model</td>
                </tr>
                <tr>
                    <th>Serial</th>
                    <td>@Model.Serial</td>
                </tr>
                <tr>
                    <th>Size</th>
                    <td>@FormatSize(Model.Size)</td>
                </tr>
            </tbody>
        </table>
    </div>
    @if (Model.Partitions != null && Model.Partitions.Any())
        {
            @foreach (var partition in Model.Partitions)
            {
                <div class="card partition-card mb-2">
                    <!-- Card Header -->
                    <div class="card-header d-flex justify-content-between align-items-center" style="background-color: #01686b36;">
                        <div class="d-flex align-items-center">
                            <button class="btn btn-link p-0 me-2 chevron-button"
                                @onclick="() => TogglePartitionDetails(partition.Name!)">
                                <img src="/icons/chevron-down.svg" alt="Expand Details"
                                    class="chevron-icon @(IsPartitionDetailsVisible(partition.Name!) ? "rotated" : "")"
                                    style="height: 24px;" />
                            </button>
                            <!-- Partition Icon -->
                            <img src="/icons/pie-chart.svg" alt="Partition" style="height: 24px; margin-right: 8px;" />
                            <span>@partition.Name</span>
                        </div>
                    </div>
                    <!-- Collapsible Details -->
                    @if (IsPartitionDetailsVisible(partition.Name!))
                    {
                        <div class="card-body">
                            <!-- Partition Details Table -->
                            <div class="table-responsive">
                                <table class="table table-striped">
                                    <tbody>
                                        <tr>
                                            <th>Partition Name</th>
                                            <td>@partition.Name</td>
                                        </tr>
                                        <tr>
                                            <th>Mountpoint</th>
                                            <td>@partition.MountPoint</td>
                                        </tr>
                                        <tr>
                                            <th>Partition UUID</th>
                                            <td>@partition.UUID</td>
                                        </tr>
                                        <tr>
                                            <th>Filesystem</th>
                                            <td>@partition.Fstype</td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    }
                </div>
            }
        }
    </div>
}


@code {
    [Inject] protected ToastService ToastService { get; set; } = default!;

    [Parameter, EditorRequired]
    public Drive Model { get; set; } = default!;

    [Parameter]
    public EventCallback<string> OnProtect { get; set; }

    [Parameter]
    public EventCallback<string> OnSelect { get; set; }

    [Parameter]
    public bool IsSelected { get; set; } = false;

    private bool IsNewDriveDetailsVisible { get; set; } = false;
    private HashSet<string> expandedPartitions = new HashSet<string>();

    private void ToggleDetails()
    {
        Logger.LogInformation($"Toggle button clicked for drive: {Model.Serial}");
        IsNewDriveDetailsVisible = !IsNewDriveDetailsVisible;
    }

    private void TogglePartitionDetails(string partitionName)
    {
        if (expandedPartitions.Contains(partitionName))
            expandedPartitions.Remove(partitionName);
        else
            expandedPartitions.Add(partitionName);
    }

    private bool IsPartitionDetailsVisible(string partitionName)
    {
        return expandedPartitions.Contains(partitionName);
    }

    private async Task ProtectDriveHandler()
    {
        if (!string.IsNullOrEmpty(Model.Serial))
        {
            await ProtectDrive(Model.Serial);
        }
    }

    private async Task ProtectDrive(string serial)
    {
        Logger.LogInformation($"Protect button clicked for drive: {serial}");
        await OnProtect.InvokeAsync(serial);
    }

    private async Task SelectDriveHandler()
    {
        if (!string.IsNullOrEmpty(Model.Serial))
        {
            await SelectDrive(Model.Serial);
        }
    }

    private async Task SelectDrive(string serial)
    {
        Logger.LogInformation($"Select button clicked for drive: {serial}");
        await OnSelect.InvokeAsync(serial);
    }

    private string FormatSize(long sizeInBytes)
    {
        if (sizeInBytes < 1024)
            return $"{sizeInBytes} B";
        else if (sizeInBytes < 1024 * 1024)
            return $"{(sizeInBytes / 1024.0):F2} KB";
        else if (sizeInBytes < 1024 * 1024 * 1024)
            return $"{(sizeInBytes / (1024.0 * 1024.0)):F2} MB";
        else
            return $"{(sizeInBytes / (1024.0 * 1024.0 * 1024.0)):F2} GB";
    }

    private string GetCardHeaderStyle()
    {
        if (IsSelected)
        {
            // Slight blue tint for selected drives
            return "background-color: #007bff; color:white;";
        }
        else
        {
            // Default style
            return "background-color: #343a40; color:white;";
        }
    }

    private string GetSelectIcon()
    {
        return IsSelected ? "/icons/plus-square-fill.svg" : "/icons/plus-square.svg";
    }
}
