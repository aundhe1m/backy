@using Backy.Data
@using Backy.Models
@using Backy.Components
@using Backy.Services
@using Microsoft.Extensions.Logging
@inject ICustomToastService ToastService
@inject ILogger<NewDriveCard> Logger
@inject NavigationManager Navigation

<div class="card drive-card new-drive-card mb-3">
    <!-- Card Header -->
    <div class="card-header d-flex justify-content-between align-items-center"
        style="background-color: #343a40; color:white;">
        <div class="d-flex align-items-center">
            <!-- Expand/Collapse button -->
            <button type="button" class="btn btn-link p-0 me-2 chevron-button" @onclick="ToggleDetails">
                <img src="/icons/chevron-down.svg" alt="Expand Details"
                    class="chevron-icon @(IsNewDriveDetailsVisible ? "rotated" : "")" style="height: 24px;" />
            </button>
            <h2>@headingValue</h2>
            <button @onclick="UpdateHeading">
                Update heading
            </button>
            <!-- Drive Icon -->
            <img src="/icons/device-hdd.svg" alt="Drive Icon" style="height: 24px; margin-right: 8px;" />
            <span>@(string.IsNullOrEmpty(Model.Name) ? "Unnamed Drive" : Model.Name)</span>
        </div>
        <!-- Drive Size -->
        <div>
            <div>
                <span>@FormatSize(Model.Size)</span>
            </div>
        </div>
        <!-- Action Buttons -->
        <div class="btn-group">
            <!-- Protect Button -->
            <button type="button" class="btn btn-secondary protect-drive-button" @onclick="ProtectDriveHandler"
                title="Protect Drive">
                <img src="/icons/shield-lock.svg" alt="Protect Drive" style="height: 24px;" />
            </button>
            <!-- Select Button -->
            <button type="button" class="btn btn-primary select-drive-button" @onclick="() => SelectDrive(Model.Serial)"
                title="Select Drive">
                <img src="/icons/plus-square.svg" alt="Select Drive" style="height: 24px;" />
            </button>
        </div>
    </div>
    <!-- Collapsible Details -->
    @if (IsNewDriveDetailsVisible)
    {
        <div class="card-body">
            <!-- Details Content -->
            <div class="table-responsive">
                <table class="table table-striped">
                    <tbody>
                        <tr>
                            <th>Vendor</th>
                            <td>@Model.Vendor</td>
                        </tr>
                        <tr>
                            <th>Model</th>
                            <td>@Model.Model</td>
                        </tr>
                        <tr>
                            <th>Serial</th>
                            <td>@Model.Serial</td>
                        </tr>
                        <tr>
                            <th>Size</th>
                            <td>@FormatSize(Model.Size)</td>
                        </tr>
                        @if (Model.Partitions != null && Model.Partitions.Any())
                        {
                            <tr>
                                <th>Partitions</th>
                                <td>
                                    @foreach (var partition in Model.Partitions)
                                    {
                                        <div>@partition.Name - @partition.Fstype</div>
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    }
</div>

@code {
    [Parameter, EditorRequired]
    public Drive Model { get; set; } = default!;

    [Parameter]
    public EventCallback<string> OnProtect { get; set; }

    [Parameter]
    public EventCallback<string> OnSelect { get; set; }

    private bool IsNewDriveDetailsVisible { get; set; } = false;
    private HashSet<string> expandedPartitions = new HashSet<string>();

    private string headingValue = "Initial heading";

    private async Task UpdateHeading()
    {
        await Task.Delay(2000);

        headingValue = $"New heading ({DateTime.Now})";
    }

    private void ToggleDetails()
    {
        ToastService.ShowInfo("Test button clicked.");
        Logger.LogInformation($"Toggle button clicked for drive: {Model.Serial}");
        IsNewDriveDetailsVisible = !IsNewDriveDetailsVisible;
    }

    private void TogglePartitionDetails(string partitionName)
    {
        if (expandedPartitions.Contains(partitionName))
            expandedPartitions.Remove(partitionName);
        else
            expandedPartitions.Add(partitionName);
    }

    private async Task ProtectDriveHandler()
    {
        if (!string.IsNullOrEmpty(Model.Serial))
        {
            await ProtectDrive(Model.Serial);
        }
    }
    private async Task ProtectDrive(string serial)
    {
        Logger.LogInformation($"Protect button clicked for drive: {serial}");
        await OnProtect.InvokeAsync(serial);
    }

    private async Task SelectDriveHandler()
    {
        if (!string.IsNullOrEmpty(Model.Serial))
        {
            await SelectDrive(Model.Serial);
        }
    }

    private async Task SelectDrive(string serial)
    {
        Logger.LogInformation($"Select button clicked for drive: {serial}");
        await OnSelect.InvokeAsync(serial);
    }

    private string FormatSize(long sizeInBytes)
    {
        if (sizeInBytes < 1024)
            return $"{sizeInBytes} B";
        else if (sizeInBytes < 1024 * 1024)
            return $"{(sizeInBytes / 1024.0):F2} KB";
        else if (sizeInBytes < 1024 * 1024 * 1024)
            return $"{(sizeInBytes / (1024.0 * 1024.0)):F2} MB";
        else
            return $"{(sizeInBytes / (1024.0 * 1024.0 * 1024.0)):F2} GB";
    }
}
