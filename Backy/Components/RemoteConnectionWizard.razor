@using Backy.Models
@inject ToastService ToastService

<Modal @ref="wizardModal" Size="ModalSize.Large" Title="@GetTitle()">
    <BodyTemplate>
        @if (CurrentStep == 1)
        {
            <RemoteFormSSHDetails @ref="sshDetailsForm" RemoteConnectionModel="RemoteConnectionModel" />
        }
        else if (CurrentStep == 2)
        {
            <RemoteFormPathSelection @ref="pathSelectionForm" RemoteConnectionModel="RemoteConnectionModel" />
        }
        else if (CurrentStep == 3)
        {
            <RemoteFormFilters @ref="filtersForm" RemoteConnectionModel="RemoteConnectionModel" />
        }
        else if (CurrentStep == 4)
        {
            <RemoteFormSchedule @ref="scheduleForm" RemoteConnectionModel="RemoteConnectionModel" />
        }
    </BodyTemplate>
    <FooterTemplate>
        <button class="btn btn-secondary" @onclick="PreviousStep" disabled="@(CurrentStep == 1)">Back</button>
        @if (CurrentStep == 4)
        {
            <button class="btn btn-primary" @onclick="() => Finish(false)">Finish</button>
            <button class="btn btn-primary ms-2" @onclick="() => Finish(true)">Finish and Scan</button>
        }
        else
        {
            <button class="btn btn-primary" @onclick="NextStep">Next</button>
        }
    </FooterTemplate>

</Modal>

@code {
    [Parameter]
    public EventCallback<(RemoteConnection connection, bool startScan)> OnFinished { get; set; }

    private Modal wizardModal = default!;
    private int CurrentStep = 1;
    private RemoteConnection RemoteConnectionModel { get; set; } = new RemoteConnection();

    private RemoteFormSSHDetails? sshDetailsForm;
    private RemoteFormPathSelection? pathSelectionForm;
    private RemoteFormFilters? filtersForm;
    private RemoteFormSchedule? scheduleForm;

    public async Task ShowAsync()
    {
        CurrentStep = 1;
        RemoteConnectionModel = new RemoteConnection();
        await wizardModal.ShowAsync();
    }

    private string GetTitle() => CurrentStep switch
    {
        1 => "Add Remote Connection - SSH Details",
        2 => "Add Remote Connection - Select Remote Path",
        3 => "Add Remote Connection - Filters",
        4 => "Add Remote Connection - Schedule",
        _ => "Add Remote Connection"
    };

    private string GetNextButtonText() => CurrentStep == 4 ? "Finish" : "Next";

    private async Task NextStep()
    {
        bool isValid = CurrentStep switch
        {
            1 => await ValidateStep1(),
            2 => await ValidateStep2(),
            3 => await ValidateStep3(),
            _ => false
        };

        if (isValid)
        {
            CurrentStep++;
        }
    }

    private async Task<bool> ValidateStep1()
    {
        if (sshDetailsForm != null)
        {
            return await sshDetailsForm.SubmitFormAsync();
        }
        return false;
    }

    private async Task<bool> ValidateStep2()
    {
        if (pathSelectionForm != null)
        {
            return await pathSelectionForm.ValidateFormAsync();
        }
        return false;
    }

    private async Task<bool> ValidateStep3()
    {
        if (filtersForm != null)
        {
            filtersForm.SaveChanges();
            await Task.CompletedTask;
            return true;
        }
        await Task.CompletedTask;
        return false;
    }

    private async Task Finish(bool startScan)
    {
        if (scheduleForm != null)
        {
            scheduleForm.SaveChanges();
        }

        // Finalize and save the new connection
        await OnFinished.InvokeAsync((RemoteConnectionModel, startScan));
        await wizardModal.HideAsync();
        ToastService.Notify(new ToastMessage(ToastType.Success, "Remote Connection created successfully."));
    }

    private void PreviousStep()
    {
        if (CurrentStep > 1)
        {
            CurrentStep--;
        }
    }
}
