@using Backy.Models
@using Microsoft.Extensions.Logging
@using Backy.Services
@inject ILogger<PoolGroupDriveCard> Logger
@inject NavigationManager Navigation

<div class="card drive-card mb-3">
    <!-- Card Header -->
    <div class="card-header d-flex justify-content-between align-items-center"
        style="background-color:@HeaderBackgroundColor; color:black;">
        <div class="d-flex align-items-center">
            <button class="btn btn-link p-0 me-2 chevron-button" @onclick="ToggleDetails">
                <img src="/icons/chevron-down.svg" alt="Expand Details"
                    class="chevron-icon @(IsPoolDriveDetailsVisible ? "rotated" : "")" style="height: 24px;" />
            </button>
            <!-- Drive Icon -->
            <img src="/icons/hdd.svg" alt="Drive Icon" style="height: 24px; margin-right: 8px;" />
            <span>@Model.GroupLabel</span>
        </div>
        <!-- Force Add Button -->
        <div class="btn-group">
            <button class="btn btn-secondary" @onclick="UnmountPool">Unmount</button>
            <button class="btn btn-danger" @onclick="RemovePoolGroup">Remove</button>
            <button class="btn btn-primary" @onclick="MountPool">Mount</button>
            <button class="btn btn-info" @onclick="RenamePoolGroup">Rename</button>
        </div>
    </div>

    <!-- Drive Details -->
    @if (IsPoolDriveDetailsVisible)
    {
        <div class="card-body">
            <!-- Drive Details Table -->
            <div class="table-responsive">
                <table class="table table-striped">
                    <tbody>
                        <tr>
                            <th>State</th>
                            <td>@(Model.PoolEnabled ? "Enabled" : "Disabled")</td>
                        </tr>
                        <tr>
                            <th>All Drives Connected</th>
                            <td>@(Model.AllDrivesConnected ? "Yes" : "No")</td>
                        </tr>
                        <tr>
                            <th>Pool Status</th>
                            <td>@Model.PoolStatus</td>
                        </tr>
                        <tr>
                            <th>Size</th>
                            <td>@Model.Size</td>
                        </tr>
                        <tr>
                            <th>Used</th>
                            <td>@Model.Used</td>
                        </tr>
                        <tr>
                            <th>Available</th>
                            <td>@Model.Available</td>
                        </tr>
                        <tr>
                            <th>Use Percent</th>
                            <td>@Model.UsePercent</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    }
</div>

@code {
    [Parameter, EditorRequired]
    public PoolGroup Model { get; set; } = default!;

    [Parameter]
    public EventCallback<PoolGroup> OnUnmountPool { get; set; }

    [Parameter]
    public EventCallback<PoolGroup> OnRemovePoolGroup { get; set; }

    [Parameter]
    public EventCallback<PoolGroup> OnMountPool { get; set; }

    [Parameter]
    public EventCallback<PoolGroup> OnRenamePoolGroup { get; set; }
    private string HeaderBackgroundColor { get; set; } = "#343a40"; // Default dark

    private bool IsPoolDriveDetailsVisible { get; set; } = false;

    private void ToggleDetails()
    {
        IsPoolDriveDetailsVisible = !IsPoolDriveDetailsVisible;
    }

    private async Task UnmountPool()
    {
        await OnUnmountPool.InvokeAsync(Model);
    }

    private async Task RemovePoolGroup()
    {
        await OnRemovePoolGroup.InvokeAsync(Model);
    }

    private async Task MountPool()
    {
        await OnMountPool.InvokeAsync(Model);
    }

    private async Task RenamePoolGroup()
    {
        await OnRenamePoolGroup.InvokeAsync(Model);
    }
}