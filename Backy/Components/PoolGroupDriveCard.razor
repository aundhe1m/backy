<!-- 
    PoolGroupDriveCard Component
    Represents a card displaying information about a pool group, including its drives and associated actions.
-->

<div class="card drive-card mb-3">
    <!-- Card Header -->
    <div class="card-header d-flex justify-content-between align-items-center">
        <div class="container">
            <div class="row">
                <!-- Left Section: Toggle Button, Pool Icon, and Group Label -->
                <div class="col d-flex align-items-center" style="padding-left: 0px;">
                    <div>
                        <button class="btn btn-link p-0 me-2 chevron-button theme-icon" @onclick="ToggleDetails">
                            <img src="/icons/chevron-down.svg" alt="Expand Details"
                                class="chevron-icon @(IsPoolDriveDetailsVisible ? "rotated" : "")"
                                style="height: 24px;" />
                        </button>
                        <!-- Pool Icon and Group Label -->
                        <img src="/icons/hdd-rack.svg" alt="Drive Icon" style="height: 24px; margin-right: 8px;"
                            class="theme-icon" />
                        <span>@Model.GroupLabel</span>
                    </div>
                </div>
                <!-- Center Section: Size Information and Progress Bar -->
                <div class="col">
                    <div class="text-center mx-4">
                        <div>@SizeFormatter.FormatSize(Model.Used) / @SizeFormatter.FormatSize(Model.Size)</div>
                        <Progress Class="mb-0 mt-1" Height="5">
                            <ProgressBar Width="@UsePercentNumeric" />
                        </Progress>
                    </div>
                </div>
                <!-- Right Section: Action Buttons -->
                <div class="col d-inline-flex align-items-center justify-content-end" style="padding-right: 0px;">
                    <!-- Remove Pool Button with Tooltip -->
                    <Tooltip Title="Remove Pool" Color="TooltipColor.Dark" style="padding-left: 12px;">
                        <button class="btn btn-danger" @onclick="RemovePoolGroup">
                            <img src="/icons/trash.svg" alt="Remove Pool" style="height: 24px;" class="theme-icon" />
                        </button>
                    </Tooltip>

                    <!-- Pool Status Button with Tooltip -->
                    <Tooltip Title="Pool Status" Color="TooltipColor.Dark" style="padding-left: 12px;">
                        @if (!Model.PoolEnabled)
                        {
                            <button class="btn btn-info" disabled>
                                <img src="/icons/heart-pulse.svg" alt="Pool Status" style="height: 24px;"
                                    class="theme-icon" />
                            </button>
                        }
                        else
                        {
                            <button class="btn btn-info" @onclick="ShowPoolStatus">
                                <img src="/icons/heart-pulse.svg" alt="Pool Status" style="height: 24px;"
                                    class="theme-icon" />
                            </button>
                        }
                    </Tooltip>

                    <!-- Mount/Unmount Pool Button with Tooltip -->
                    <Tooltip Title="Mount Pool" Color="TooltipColor.Dark" style="padding-left: 12px;">
                        @if (!Model.PoolEnabled && Model.AllDrivesConnected)
                        {
                            <button class="btn btn-primary" @onclick="MountPool">
                                <img src="/icons/play.svg" alt="Mount Pool" style="height: 24px;" class="theme-icon" />
                            </button>
                        }
                        else if (!Model.AllDrivesConnected)
                        {
                            <button class="btn btn-primary" disabled>
                                <img src="/icons/play.svg" alt="Connect all drives to mount" style="height: 24px;"
                                    class="theme-icon" />
                            </button>
                        }
                        else
                        {
                            <button class="btn btn-secondary" @onclick="UnmountPool">
                                <img src="/icons/eject.svg" alt="Unmount Pool" style="height: 24px;" class="theme-icon" />
                            </button>
                        }
                    </Tooltip>
                </div>
            </div>
        </div>
    </div>

    <!-- Drive Details Section -->
    @if (IsPoolDriveDetailsVisible)
    {
        <div class="card-body">
            <!-- List of Drives in the Pool -->
            @foreach (var drive in Model.Drives)
            {
                <PoolGroupDriveItem @key="drive.Id" Model="@drive" OnForceAdd="@ForceAddDrive" />
            }

            <!-- Pool Details Table -->
            <div class="table-responsive">
                <table class="table table-striped">
                    <tbody>
                        <tr>
                            <th>Pool Name</th>
                            <td>
                                <span>
                                    @Model.GroupLabel
                                    <Tooltip Title="Rename Pool" Color="TooltipColor.Dark" @onclick="RenamePoolGroup"
                                        role="button">
                                        <img src="/icons/pencil-square.svg" alt="Rename Pool" style="height: 20px;"
                                            class="theme-icon" />
                                    </Tooltip>
                                </span>
                            </td>
                        </tr>
                        <tr>
                            <th>State</th>
                            <td>@(Model.PoolEnabled ? "Enabled" : "Disabled")</td>
                        </tr>
                        <tr>
                            <th>All Drives Connected</th>
                            <td>@(Model.AllDrivesConnected ? "Yes" : "No")</td>
                        </tr>
                        <tr>
                            <th>Pool Status</th>
                            <td>@Model.PoolStatus</td>
                        </tr>
                        <tr>
                            <th>Size</th>
                            <td>@SizeFormatter.FormatSize(Model.Size)</td>
                        </tr>
                        <tr>
                            <th>Used</th>
                            <td>@SizeFormatter.FormatSize(Model.Used)</td>
                        </tr>
                        <tr>
                            <th>Available</th>
                            <td>@SizeFormatter.FormatSize(Model.Available)</td>
                        </tr>
                        <tr>
                            <th>Use Percent</th>
                            <td>@Model.UsePercent</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    }
</div>

<!-- Status Modal -->
<Modal @ref="statusModal" Title="Pool Status" Size="ModalSize.Large">
    <BodyTemplate>
        <div class="console-output">
            <pre>@string.Join("\n", PoolStatusOutput)<br></pre>
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="CloseStatusModal">Close</Button>
    </FooterTemplate>
</Modal>

@code {
    // ---------------------------
    // Parameters
    // ---------------------------

    [Parameter, EditorRequired]
    public PoolGroup Model { get; set; } = default!;

    [Parameter]
    public EventCallback<PoolGroup> OnUnmountPool { get; set; }

    [Parameter]
    public EventCallback<PoolGroup> OnRemovePoolGroup { get; set; }

    [Parameter]
    public EventCallback<PoolGroup> OnMountPool { get; set; }

    [Parameter]
    public EventCallback<PoolGroup> OnRenamePoolGroup { get; set; }

    [Parameter]
    public EventCallback<PoolDrive> OnForceAddDrive { get; set; }

    // ---------------------------
    // Injected Services
    // ---------------------------

    [Inject]
    protected ToastService ToastService { get; set; } = default!;

    [Inject]
    IDriveService DriveService { get; set; } = default!;

    // ---------------------------
    // Private Fields
    // ---------------------------

    private bool IsPoolDriveDetailsVisible { get; set; } = false;
    private Modal statusModal = default!;
    private string PoolStatusOutput { get; set; } = string.Empty;

    // ---------------------------
    // Computed Properties
    // ---------------------------

    /// <summary>
    /// Parses the UsePercent string into an integer for the progress bar.
    /// Ensures the value is within 0-100%.
    /// </summary>
    private int UsePercentNumeric
    {
        get
        {
            if (int.TryParse(Model.UsePercent.TrimEnd('%'), out int percent))
            {
                // Ensure the percentage is within 0-100
                return Math.Clamp(percent, 0, 100);
            }
            return 0;
        }
    }

    // ---------------------------
    // Event Handlers
    // ---------------------------

    /// <summary>
    /// Toggles the visibility of the pool drive details section.
    /// </summary>
    private void ToggleDetails()
    {
        IsPoolDriveDetailsVisible = !IsPoolDriveDetailsVisible;
    }

    /// <summary>
    /// Invokes the Unmount Pool callback.
    /// </summary>
    private async Task UnmountPool()
    {
        await OnUnmountPool.InvokeAsync(Model);
    }

    /// <summary>
    /// Invokes the Remove Pool Group callback.
    /// </summary>
    private async Task RemovePoolGroup()
    {
        await OnRemovePoolGroup.InvokeAsync(Model);
    }

    /// <summary>
    /// Invokes the Mount Pool callback.
    /// </summary>
    private async Task MountPool()
    {
        await OnMountPool.InvokeAsync(Model);
    }

    /// <summary>
    /// Invokes the Rename Pool Group callback.
    /// </summary>
    private async Task RenamePoolGroup()
    {
        await OnRenamePoolGroup.InvokeAsync(Model);
    }

    /// <summary>
    /// Invokes the Force Add Drive callback for a specific drive.
    /// </summary>
    /// <param name="drive">The drive to force add.</param>
    private async Task ForceAddDrive(PoolDrive drive)
    {
        await OnForceAddDrive.InvokeAsync(drive);
    }

    /// <summary>
    /// Shows the pool status by fetching details from the DriveService and displaying them in a modal.
    /// </summary>
    private async Task ShowPoolStatus()
    {
        var result = await DriveService.GetPoolDetailAsync(Model.PoolGroupGuid);
        if (result.Success)
        {
            PoolStatusOutput = result.Output;
            await statusModal.ShowAsync();
        }
        else
        {
            ToastService.Notify(new ToastMessage(ToastType.Danger, $"Failed to get pool status: {result.Message}"));
        }
    }

    /// <summary>
    /// Closes the pool status modal.
    /// </summary>
    private async Task CloseStatusModal()
    {
        await statusModal.HideAsync();
    }
}
