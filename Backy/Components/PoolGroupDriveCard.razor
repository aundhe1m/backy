<!-- 
    PoolGroupDriveCard Component
    Represents a card displaying information about a pool group, including its drives and associated actions.
    Also handles the "creating" state for new pools.
-->

<div class="card drive-card mb-3">
    <!-- Card Header -->
    <div class="card-header d-flex justify-content-between align-items-center">
        <div class="container">
            <div class="row">
                <!-- Left Section: Toggle Button, Pool Icon, and Group Label -->
                <div class="col d-flex align-items-center" style="padding-left: 0px;">
                    <div>
                        <button class="btn btn-link p-0 me-2 chevron-button theme-icon" @onclick="ToggleDetails" 
                                disabled="@(IsCreating || IsInCreatingState)">
                            <img src="/icons/chevron-down.svg" alt="Expand Details"
                                class="chevron-icon @(IsPoolDriveDetailsVisible ? "rotated180" : "nonrotated") @((IsCreating || IsInCreatingState) ? "disabled-icon" : "")"
                                style="height: 24px;" />
                        </button>
                        <!-- Pool Icon and Group Label -->
                        <img src="/icons/hdd-rack.svg" alt="Drive Icon" style="height: 24px; margin-right: 8px;"
                            class="theme-icon" />
                        <span>@Model.GroupLabel</span>
                        
                        @if (IsCreating || IsInCreatingState)
                        {
                            <Spinner Type="SpinnerType.Grow" Size="SpinnerSize.Small" Color="SpinnerColor.Primary" Class="ms-2" />
                            <Badge Color="BadgeColor.Info" Class="ms-2">Creating</Badge>
                        }
                        else if (IsNew)
                        {
                            <Badge Color="BadgeColor.Primary" Class="ms-2">New!</Badge>
                        }
                    </div>
                </div>
                <!-- Center Section: Size Information or Creation Progress -->
                <div class="col">
                    <div class="text-center mx-4">
                        @if (IsCreating || IsInCreatingState)
                        {
                            <div>Pool creation in progress...</div>
                            <Progress Class="mb-0 mt-1" Height="5">
                                <ProgressBar Type="ProgressType.StripedAndAnimated" Color="ProgressColor.Dark" Width="100" />
                            </Progress>
                        }
                        else
                        {
                            <div>@SizeFormatter.FormatSize(Model.Used) / @SizeFormatter.FormatSize(Model.Size)</div>
                            <Progress Class="mb-0 mt-1" Height="5">
                                <ProgressBar Width="@UsePercentNumeric" />
                            </Progress>
                        }
                    </div>
                </div>
                <!-- Right Section: Action Buttons -->
                <div class="col d-inline-flex align-items-center justify-content-end" style="padding-right: 0px;">
                    <!-- Remove Pool Button with Tooltip -->
                    <Tooltip Title="Remove Pool" Color="TooltipColor.Dark" style="padding-left: 12px;">
                        <button class="btn btn-danger" @onclick="RemovePoolGroup" disabled="@(IsCreating || IsInCreatingState)">
                            <img src="/icons/trash.svg" alt="Remove Pool" style="height: 24px;" class="theme-icon" />
                        </button>
                    </Tooltip>

                    <!-- Pool Status Button with Tooltip -->
                    <Tooltip Title="Pool Status" Color="TooltipColor.Dark" style="padding-left: 12px;">
                        @if (IsCreating || IsInCreatingState || !Model.PoolEnabled)
                        {
                            <button class="btn btn-info" disabled>
                                <img src="/icons/heart-pulse.svg" alt="Pool Status" style="height: 24px;"
                                    class="theme-icon" />
                            </button>
                        }
                        else
                        {
                            <button class="btn btn-info" @onclick="ShowPoolStatus">
                                <img src="/icons/heart-pulse.svg" alt="Pool Status" style="height: 24px;"
                                    class="theme-icon" />
                            </button>
                        }
                    </Tooltip>

                    <!-- Mount/Unmount Pool Button with Tooltip -->
                    <Tooltip Title="Mount Pool" Color="TooltipColor.Dark" style="padding-left: 12px;">
                        @if (IsCreating || IsInCreatingState)
                        {
                            <button class="btn btn-primary" disabled>
                                <img src="/icons/play.svg" alt="Creating pool..." style="height: 24px;" class="theme-icon" />
                            </button>
                        }
                        else if (!Model.PoolEnabled && Model.AllDrivesConnected)
                        {
                            <button class="btn btn-primary" @onclick="MountPool">
                                <img src="/icons/play.svg" alt="Mount Pool" style="height: 24px;" class="theme-icon" />
                            </button>
                        }
                        else if (!Model.AllDrivesConnected)
                        {
                            <button class="btn btn-primary" disabled>
                                <img src="/icons/play.svg" alt="Connect all drives to mount" style="height: 24px;"
                                    class="theme-icon" />
                            </button>
                        }
                        else
                        {
                            <button class="btn btn-secondary" @onclick="UnmountPool">
                                <img src="/icons/eject.svg" alt="Unmount Pool" style="height: 24px;" class="theme-icon" />
                            </button>
                        }
                    </Tooltip>
                </div>
            </div>
        </div>
    </div>

    <!-- Drive Details Section -->
    @if (IsPoolDriveDetailsVisible)
    {
        <div class="card-body">
            <!-- List of Drives in the Pool -->
            @foreach (var drive in Model.Drives)
            {
                <PoolGroupDriveItem @key="drive.Id" Model="@drive" OnForceAdd="@ForceAddDrive" />
            }

            <!-- Pool Details Table -->
            <div class="table-responsive">
                <table class="table table-striped">
                    <tbody>
                        <tr>
                            <th>Pool Name</th>
                            <td>
                                <span>
                                    @Model.GroupLabel
                                    @if (!IsCreating)
                                    {
                                        <Tooltip Title="Rename Pool" Color="TooltipColor.Dark" @onclick="RenamePoolGroup"
                                            role="button">
                                            <img src="/icons/pencil-square.svg" alt="Rename Pool" style="height: 20px;"
                                                class="theme-icon" />
                                        </Tooltip>
                                    }
                                </span>
                            </td>
                        </tr>
                        <tr>
                            <th>State</th>
                            <td>@(IsCreating ? "Creating" : Model.State)</td>
                        </tr>
                        <tr>
                            <th>All Drives Connected</th>
                            <td>@(Model.AllDrivesConnected ? "Yes" : "No")</td>
                        </tr>
                        <tr>
                            <th>Pool Status</th>
                            <td>@(Model.PoolStatus ?? "Unknown")</td>
                        </tr>
                        <tr>
                            <th>Size</th>
                            <td>@SizeFormatter.FormatSize(Model.Size)</td>
                        </tr>
                        <tr>
                            <th>Used</th>
                            <td>@SizeFormatter.FormatSize(Model.Used)</td>
                        </tr>
                        <tr>
                            <th>Available</th>
                            <td>@SizeFormatter.FormatSize(Model.Available)</td>
                        </tr>
                        <tr>
                            <th>Use Percent</th>
                            <td>@Model.UsePercent</td>
                        </tr>
                        @if (IsCreating)
                        {
                            <tr>
                                <th>GUID</th>
                                <td>@Model.PoolGroupGuid</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    }
</div>

<!-- Status Modal -->
<Modal @ref="statusModal" Title="Pool Status" Size="ModalSize.Large">
    <BodyTemplate>
        <div class="console-output">
            <pre>@string.Join("\n", PoolStatusOutput)<br></pre>
        </div>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="CloseStatusModal">Close</Button>
    </FooterTemplate>
</Modal>

<!-- Creation Logs Modal -->
<Modal @ref="creationLogsModal" Title="Pool Creation Logs" Size="ModalSize.Large">
    <BodyTemplate>
        @if (IsLoadingLogs)
        {
            <div class="text-center my-3">
                <Spinner Type="SpinnerType.Grow" Color="SpinnerColor.Primary" />
                <p class="mt-2">Loading pool creation logs...</p>
            </div>
        }
        else if (CreationLogs.Any())
        {
            <div class="console-output" style="max-height: 500px; overflow-y: auto;">
                <pre>@string.Join("\n", CreationLogs)</pre>
            </div>
        }
        else
        {
            <Alert Color="AlertColor.Warning">
                <span style="display: flex;">
                    <img src="/icons/exclamation-triangle-fill-yellow.svg" alt="Warning Icon"
                        style="height: 24px; margin-right: 8px;" />
                    <h5 style="margin: 0;">No Logs Available</h5>
                </span>
                <hr style="border: 1px solid gray; margin-top: 8px; margin-bottom: 8px;" />
                <div>
                    No creation logs available for this pool.
                </div>
            </Alert>
        }
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="CloseCreationLogsModal">Close</Button>
    </FooterTemplate>
</Modal>

@code {
    // ---------------------------
    // Parameters
    // ---------------------------

    [Parameter, EditorRequired]
    public PoolGroup Model { get; set; } = default!;

    [Parameter]
    public EventCallback<PoolGroup> OnUnmountPool { get; set; }

    [Parameter]
    public EventCallback<PoolGroup> OnRemovePoolGroup { get; set; }

    [Parameter]
    public EventCallback<PoolGroup> OnMountPool { get; set; }

    [Parameter]
    public EventCallback<PoolGroup> OnRenamePoolGroup { get; set; }

    [Parameter]
    public EventCallback<PoolDrive> OnForceAddDrive { get; set; }

    [Parameter]
    public EventCallback<Guid> OnCreationComplete { get; set; }

    [Parameter]
    public bool IsCreating { get; set; } = false;

    [Parameter]
    public bool IsNew { get; set; } = false;

    // ---------------------------
    // Injected Services
    // ---------------------------

    [Inject]
    protected ToastService ToastService { get; set; } = default!;

    [Inject]
    IAppDriveService AppDriveService { get; set; } = default!;

    [Inject]
    ILogger<PoolGroupDriveCard> Logger { get; set; } = default!;

    // ---------------------------
    // Private Fields
    // ---------------------------

    private bool IsPoolDriveDetailsVisible { get; set; } = false;
    private Modal statusModal = default!;
    private Modal creationLogsModal = default!;
    private string PoolStatusOutput { get; set; } = string.Empty;
    private List<string> CreationLogs { get; set; } = new List<string>();
    private bool IsLoadingLogs { get; set; } = false;
    private CancellationTokenSource? cancellationTokenSource;

    // ---------------------------
    // Computed Properties
    // ---------------------------

    /// <summary>
    /// Parses the UsePercent string into an integer for the progress bar.
    /// Ensures the value is within 0-100%.
    /// </summary>
    private int UsePercentNumeric
    {
        get
        {
            if (int.TryParse(Model.UsePercent.TrimEnd('%'), out int percent))
            {
                // Ensure the percentage is within 0-100
                return Math.Clamp(percent, 0, 100);
            }
            return 0;
        }
    }

    /// <summary>
    /// Determines if the pool is currently in a creating state.
    /// </summary>
    private bool IsInCreatingState => !IsCreating && (Model.State == "creating" || Model.PoolStatus == "Creating");

    // ---------------------------
    // Lifecycle Methods
    // ---------------------------

    protected override void OnInitialized()
    {
        // If the pool is being created, start monitoring the creation process
        if (IsCreating)
        {
            cancellationTokenSource = new CancellationTokenSource();
            
            // Start a background task to monitor creation progress with exponential backoff
            _ = Task.Run(() => MonitorPoolCreation(cancellationTokenSource.Token));
        }
    }

    public void Dispose()
    {
        // Clean up resources
        cancellationTokenSource?.Cancel();
        cancellationTokenSource?.Dispose();
    }

    // ---------------------------
    // Event Handlers
    // ---------------------------

    /// <summary>
    /// Toggles the visibility of the pool drive details section.
    /// </summary>
    private void ToggleDetails()
    {
        if (!IsCreating)
        {
            IsPoolDriveDetailsVisible = !IsPoolDriveDetailsVisible;
        }
    }

    /// <summary>
    /// Invokes the Unmount Pool callback.
    /// </summary>
    private async Task UnmountPool()
    {
        if (!IsCreating)
        {
            await OnUnmountPool.InvokeAsync(Model);
        }
    }

    /// <summary>
    /// Invokes the Remove Pool Group callback.
    /// </summary>
    private async Task RemovePoolGroup()
    {
        if (!IsCreating)
        {
            await OnRemovePoolGroup.InvokeAsync(Model);
        }
    }

    /// <summary>
    /// Invokes the Mount Pool callback.
    /// </summary>
    private async Task MountPool()
    {
        if (!IsCreating)
        {
            await OnMountPool.InvokeAsync(Model);
        }
    }

    /// <summary>
    /// Invokes the Rename Pool Group callback.
    /// </summary>
    private async Task RenamePoolGroup()
    {
        if (!IsCreating)
        {
            await OnRenamePoolGroup.InvokeAsync(Model);
        }
    }

    /// <summary>
    /// Invokes the Force Add Drive callback for a specific drive.
    /// </summary>
    /// <param name="drive">The drive to force add.</param>
    private async Task ForceAddDrive(PoolDrive drive)
    {
        await OnForceAddDrive.InvokeAsync(drive);
    }

    /// <summary>
    /// Shows the pool status by fetching details from the AppDriveService and displaying them in a modal.
    /// </summary>
    private async Task ShowPoolStatus()
    {
        var result = await AppDriveService.GetPoolDetailAsync(Model.PoolGroupGuid);
        if (result.Success)
        {
            PoolStatusOutput = result.Output;
            await statusModal.ShowAsync();
        }
        else
        {
            ToastService.Notify(new ToastMessage(ToastType.Danger, $"Failed to get pool status: {result.Message}"));
        }
    }

    /// <summary>
    /// Closes the pool status modal.
    /// </summary>
    private async Task CloseStatusModal()
    {
        await statusModal.HideAsync();
    }

    /// <summary>
    /// Loads and displays the creation logs for the pool.
    /// </summary>
    private async Task ViewCreationLogs()
    {
        IsLoadingLogs = true;
        CreationLogs.Clear();
        await creationLogsModal.ShowAsync();
        
        try
        {
            // Fetch the pool creation outputs from the service
            var result = await AppDriveService.GetPoolOutputsAsync(Model.PoolGroupGuid);
            
            if (result.Success && result.Outputs.Any())
            {
                CreationLogs = result.Outputs;
                Logger.LogDebug("Successfully loaded {Count} log entries for pool {PoolGroupGuid}", 
                    CreationLogs.Count, Model.PoolGroupGuid);
            }
            else
            {
                Logger.LogWarning("No logs available for pool {PoolGroupGuid}: {Message}", 
                    Model.PoolGroupGuid, result.Message);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading pool creation logs for {PoolGroupGuid}", Model.PoolGroupGuid);
            ToastService.Notify(new ToastMessage(ToastType.Danger, $"Error loading pool logs: {ex.Message}"));
        }
        finally
        {
            IsLoadingLogs = false;
            StateHasChanged();
        }
    }

    /// <summary>
    /// Closes the creation logs modal.
    /// </summary>
    private async Task CloseCreationLogsModal()
    {
        await creationLogsModal.HideAsync();
    }

    /// <summary>
    /// Monitors the creation of a pool until it is complete.
    /// </summary>
    /// <param name="cancellationToken">A cancellation token to allow cancelling the monitoring</param>
    private async Task MonitorPoolCreation(CancellationToken cancellationToken)
    {
        try
        {
            // Start monitoring with exponential backoff
            var completedPool = await AppDriveService.MonitorPoolCreationWithPollingAsync(Model.PoolGroupGuid, cancellationToken);
            
            if (!cancellationToken.IsCancellationRequested)
            {
                if (completedPool != null)
                {
                    // Pool creation completed successfully
                    await InvokeAsync(() => ToastService.Notify(new ToastMessage(ToastType.Success, $"Pool {Model.GroupLabel} created successfully!")));
                    await InvokeAsync(() => OnCreationComplete.InvokeAsync(Model.PoolGroupGuid));
                }
                else
                {
                    // Pool creation failed
                    await InvokeAsync(() => ToastService.Notify(new ToastMessage(ToastType.Danger, $"Pool {Model.GroupLabel} creation failed.")));
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error monitoring pool creation for {PoolGroupGuid}", Model.PoolGroupGuid);
            await InvokeAsync(() => ToastService.Notify(new ToastMessage(ToastType.Danger, $"Error monitoring pool creation: {ex.Message}")));
        }
    }
}
