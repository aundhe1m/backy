<!-- Backy/Components/PoolGroupDriveCard.razor -->

<div class="card drive-card mb-3">
    <!-- Card Header -->
    <div class="card-header d-flex justify-content-between align-items-center">
        <div class="d-flex align-items-center">
            <button class="btn btn-link p-0 me-2 chevron-button" @onclick="ToggleDetails">
                <img src="/icons/chevron-down.svg" alt="Expand Details"
                    class="chevron-icon @(IsPoolDriveDetailsVisible ? "rotated" : "")" style="height: 24px;" />
            </button>
            <!-- Drive Icon -->
            <img src="/icons/hdd.svg" alt="Drive Icon" style="height: 24px; margin-right: 8px;" />
            <span>@Model.GroupLabel</span>
        </div>
        <!-- Action Buttons -->
        <div class="btn-group">
            <button class="btn btn-secondary" @onclick="UnmountPool">Unmount</button>
            <button class="btn btn-danger" @onclick="RemovePoolGroup">Remove</button>
            <button class="btn btn-primary" @onclick="MountPool">Mount</button>
            <button class="btn btn-info" @onclick="RenamePoolGroup">Rename</button>
            <button class="btn btn-secondary" @onclick="ShowPoolStatus">Status</button>
        </div>
    </div>

    <!-- Drive Details -->
    @if (IsPoolDriveDetailsVisible)
    {
        <div class="card-body">
            <!-- Drive Details Table -->
            <div class="table-responsive">
                <table class="table table-striped">
                    <tbody>
                        <tr>
                            <th>State</th>
                            <td>@(Model.PoolEnabled ? "Enabled" : "Disabled")</td>
                        </tr>
                        <tr>
                            <th>All Drives Connected</th>
                            <td>@(Model.AllDrivesConnected ? "Yes" : "No")</td>
                        </tr>
                        <tr>
                            <th>Pool Status</th>
                            <td>@Model.PoolStatus</td>
                        </tr>
                        <tr>
                            <th>Size</th>
                            <td>@FormatSize(Model.Size)</td>
                        </tr>
                        <tr>
                            <th>Used</th>
                            <td>@FormatSize(Model.Used)</td>
                        </tr>
                        <tr>
                            <th>Available</th>
                            <td>@FormatSize(Model.Available)</td>
                        </tr>
                        <tr>
                            <th>Use Percent</th>
                            <td>@Model.UsePercent</td>
                        </tr>
                    </tbody>
                </table>
            </div>

            <!-- Pool Drives -->
            @foreach (var drive in Model.Drives)
            {
                <PoolGroupDriveItem @key="drive.Id" Model="@drive" OnForceAdd="@ForceAddDrive" />
            }
        </div>
    }

    <!-- Status Modal -->
    <Modal @ref="statusModal" Title="Pool Status">
        <BodyTemplate>
            <pre>@PoolStatusOutput</pre>
        </BodyTemplate>
        <FooterTemplate>
            <Button Color="ButtonColor.Secondary" @onclick="CloseStatusModal">Close</Button>
        </FooterTemplate>
    </Modal>
</div>

@code {
    [Parameter, EditorRequired]
    public PoolGroup Model { get; set; } = default!;

    [Parameter]
    public EventCallback<PoolGroup> OnUnmountPool { get; set; }

    [Parameter]
    public EventCallback<PoolGroup> OnRemovePoolGroup { get; set; }

    [Parameter]
    public EventCallback<PoolGroup> OnMountPool { get; set; }

    [Parameter]
    public EventCallback<PoolGroup> OnRenamePoolGroup { get; set; }

    [Parameter]
    public EventCallback<PoolDrive> OnForceAddDrive { get; set; }

    [Inject]
    protected ToastService ToastService { get; set; } = default!;

    [Inject]
    IDriveService DriveService { get; set; } = default!;

    private bool IsPoolDriveDetailsVisible { get; set; } = false;

    private Modal statusModal = default!;
    private string PoolStatusOutput { get; set; } = string.Empty;

    private void ToggleDetails()
    {
        IsPoolDriveDetailsVisible = !IsPoolDriveDetailsVisible;
    }

    private async Task UnmountPool()
    {
        await OnUnmountPool.InvokeAsync(Model);
    }

    private async Task RemovePoolGroup()
    {
        await OnRemovePoolGroup.InvokeAsync(Model);
    }

    private async Task MountPool()
    {
        await OnMountPool.InvokeAsync(Model);
    }

    private async Task RenamePoolGroup()
    {
        await OnRenamePoolGroup.InvokeAsync(Model);
    }

    private async Task ForceAddDrive(PoolDrive drive)
    {
        await OnForceAddDrive.InvokeAsync(drive);
    }

    private async Task ShowPoolStatus()
    {
        var result = await DriveService.GetPoolDetailAsync(Model.PoolGroupGuid);
        if (result.Success)
        {
            PoolStatusOutput = result.Output;
            await statusModal.ShowAsync();
        }
        else
        {
            ToastService.Notify(new ToastMessage(ToastType.Danger, $"Failed to get pool status: {result.Message}"));
        }
    }

    private async Task CloseStatusModal()
    {
        await statusModal.HideAsync();
    }

    private string FormatSize(long sizeInBytes)
    {
        if (sizeInBytes < 1024)
            return $"{sizeInBytes} B";
        else if (sizeInBytes < 1024 * 1024)
            return $"{(sizeInBytes / 1024.0):F2} KB";
        else if (sizeInBytes < 1024 * 1024 * 1024)
            return $"{(sizeInBytes / (1024.0 * 1024.0)):F2} MB";
        else
            return $"{(sizeInBytes / (1024.0 * 1024.0 * 1024.0)):F2} GB";
    }
}
