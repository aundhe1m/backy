@using Backy.Models
@inject IDataProtectionProvider DataProtectionProvider
@inject IRemoteConnectionService RemoteConnectionService
@inject ToastService ToastService
@inject ILogger<RemoteFormSSHDetails> Logger

<EditForm EditContext="@editContext">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <!-- SSH Details Form -->
    <div>
        <h3>SSH Details</h3>

        <!-- Connection Name -->
        <div class="mb-3">
            <label for="ConnectionName" class="form-label">Connection Name</label>
            <InputText id="ConnectionName" class="form-control" @bind-Value="RemoteConnectionModel.Name" required />
            <ValidationMessage For="@(() => RemoteConnectionModel.Name)" />
        </div>

        <!-- Hostname/IP -->
        <div class="mb-3">
            <label for="Host" class="form-label">Hostname/IP</label>
            <InputText id="Host" class="form-control" @bind-Value="RemoteConnectionModel.Host" required />
            <ValidationMessage For="@(() => RemoteConnectionModel.Host)" />
        </div>

        <!-- Port -->
        <div class="mb-3">
            <label for="Port" class="form-label">Port</label>
            <InputNumber id="Port" class="form-control" @bind-Value="RemoteConnectionModel.Port" required />
            <ValidationMessage For="@(() => RemoteConnectionModel.Port)" />
        </div>

        <!-- Username -->
        <div class="mb-3">
            <label for="Username" class="form-label">Username</label>
            <InputText id="Username" class="form-control" @bind-Value="RemoteConnectionModel.Username" required />
            <ValidationMessage For="@(() => RemoteConnectionModel.Username)" />
        </div>

        <!-- Authentication Method -->
        <div class="mb-3">
            <label class="form-label">Authentication Method</label>
            <div>
                <InputRadioGroup @bind-Value="RemoteConnectionModel.AuthenticationMethod">
                    <InputRadio Value="RemoteConnection.AuthMethod.Password" /> Password
                    <InputRadio Value="RemoteConnection.AuthMethod.SSHKey" class="ms-3" /> SSH Key
                </InputRadioGroup>
            </div>
        </div>


        @if (RemoteConnectionModel.AuthenticationMethod == RemoteConnection.AuthMethod.Password)
        {
            <!-- Password Field -->
            <div class="mb-3">
                <label for="Password" class="form-label">Password</label>
                <InputText id="Password" type="password" class="form-control" @bind-Value="Password" />
                <ValidationMessage For="@(() => Password)" />
            </div>
        }
        else
        {
            <!-- SSH Key Field -->
            <div class="mb-3">
                <label for="SSHKey" class="form-label">SSH Key</label>
                <InputTextArea id="SSHKey" class="form-control" @bind-Value="SSHKey" rows="5" />
                <ValidationMessage For="@(() => SSHKey)" />
            </div>
        }
    </div>
</EditForm>

@code {
    [Parameter]
    public RemoteConnection RemoteConnectionModel { get; set; } = new RemoteConnection();

    [Parameter]
    public EventCallback OnValidSubmit { get; set; }

    private EditContext editContext = default!;

    private string Password { get; set; } = string.Empty;
    private string SSHKey { get; set; } = string.Empty;

    protected override void OnParametersSet()
    {
        editContext = new EditContext(RemoteConnectionModel);

        // Do not unprotect and display the password or SSHKey
        Password = string.Empty;
        SSHKey = string.Empty;
    }

    public async Task<bool> SubmitFormAsync()
    {
        if (!editContext.Validate())
        {
            return false;
        }

        var isNewConnection = RemoteConnectionModel.RemoteConnectionId == Guid.Empty;

        // For new connections, the password or SSH key is required
        if (isNewConnection)
        {
            if (RemoteConnectionModel.AuthenticationMethod == RemoteConnection.AuthMethod.Password &&
            string.IsNullOrEmpty(Password))
            {
                ToastService.Notify(new ToastMessage(ToastType.Danger, "Password is required for new connections."));
                return false;
            }
            if (RemoteConnectionModel.AuthenticationMethod == RemoteConnection.AuthMethod.SSHKey && string.IsNullOrEmpty(SSHKey))
            {
                ToastService.Notify(new ToastMessage(ToastType.Danger, "SSH Key is required for new connections."));
                return false;
            }
        }

        // Protect and store the password or SSH key before validation
        var protector = DataProtectionProvider.CreateProtector("RemoteConnectionProtector");
        if (RemoteConnectionModel.AuthenticationMethod == RemoteConnection.AuthMethod.Password)
        {
            if (!string.IsNullOrEmpty(Password))
            {
                RemoteConnectionModel.Password = protector.Protect(Password);
            }
            // Else, keep existing password
            RemoteConnectionModel.SSHKey = null;
        }
        else if (RemoteConnectionModel.AuthenticationMethod == RemoteConnection.AuthMethod.SSHKey)
        {
            if (!string.IsNullOrEmpty(SSHKey))
            {
                RemoteConnectionModel.SSHKey = protector.Protect(SSHKey);
            }
            // Else, keep existing SSHKey
            RemoteConnectionModel.Password = null;
        }

        // Validate SSH Connection
        bool isValidConnection = await ValidateSSHConnection();

        if (!isValidConnection)
        {
            ToastService.Notify(new ToastMessage(ToastType.Danger, "SSH Connection validation failed."));
            return false;
        }

        await OnValidSubmit.InvokeAsync();
        return true;
    }

    private async Task<bool> ValidateSSHConnection()
    {
        try
        {
            var connectionInfo = GetSshConnectionInfo();
            using var client = new SshClient(connectionInfo);
            await Task.Run(() => client.Connect());

            if (client.IsConnected)
            {
                client.Disconnect();
                return true;
            }
            else
            {
                return false;
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "SSH Connection validation failed.");
            ToastService.Notify(new ToastMessage(ToastType.Danger, "SSH Connection validation failed."));
            return false;
        }
    }

    private ConnectionInfo GetSshConnectionInfo()
    {
        var protector = DataProtectionProvider.CreateProtector("RemoteConnectionProtector");
        if (RemoteConnectionModel.AuthenticationMethod == RemoteConnection.AuthMethod.Password)
        {
            string password;
            if (!string.IsNullOrEmpty(Password))
            {
                password = Password;
            }
            else if (!string.IsNullOrEmpty(RemoteConnectionModel.Password))
            {
                password = protector.Unprotect(RemoteConnectionModel.Password);
            }
            else
            {
                throw new InvalidOperationException("Password is not set.");
            }
            return new ConnectionInfo(RemoteConnectionModel.Host, RemoteConnectionModel.Port, RemoteConnectionModel.Username,
            new PasswordAuthenticationMethod(RemoteConnectionModel.Username, password));
        }
        else if (RemoteConnectionModel.AuthenticationMethod == RemoteConnection.AuthMethod.SSHKey)
        {
            string sshKey;
            if (!string.IsNullOrEmpty(SSHKey))
            {
                sshKey = SSHKey;
            }
            else if (!string.IsNullOrEmpty(RemoteConnectionModel.SSHKey))
            {
                sshKey = protector.Unprotect(RemoteConnectionModel.SSHKey);
            }
            else
            {
                throw new InvalidOperationException("SSH Key is not set.");
            }
            var keyFile = new PrivateKeyFile(new MemoryStream(System.Text.Encoding.UTF8.GetBytes(sshKey)));
            return new ConnectionInfo(RemoteConnectionModel.Host, RemoteConnectionModel.Port, RemoteConnectionModel.Username,
            new PrivateKeyAuthenticationMethod(RemoteConnectionModel.Username, keyFile));
        }
        else
        {
            throw new InvalidOperationException("Invalid authentication method.");
        }
    }
}
