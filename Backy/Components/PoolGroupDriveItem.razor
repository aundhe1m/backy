@using Backy.Models
@inject ILogger<PoolGroupDriveItem> Logger

<!-- 
    PoolGroupDriveItem Component
    Represents a single drive within a pool group, providing details and actions related to the drive.
-->
<div class="card drive-card mb-3">
    <!-- Card Header -->
    <div class="card-header d-flex justify-content-between align-items-center">
        <div class="d-flex align-items-center">
            <!-- Expand/Collapse Button -->
            <button class="btn btn-link p-0 me-2 chevron-button" @onclick="ToggleDetails">
                <img src="/icons/chevron-down.svg" alt="Expand Details"
                    class="theme-icon chevron-icon @(IsDriveDetailsVisible ? "rotated" : "")" style="height: 24px;" />
            </button>
            <!-- Drive Icon and Label -->
            <img src="/icons/hdd.svg" alt="Drive Icon" style="height: 24px; margin-right: 8px;" class="theme-icon" />
            <span>@(string.IsNullOrEmpty(Model.Label) ? "Unnamed Drive" : Model.Label)</span>
        </div>
        <!-- Force Add Button (Visible if Drive is Not Mounted) -->
        @if (!Model.IsMounted)
        {
            <Tooltip Title="Force Add Drive" Color="TooltipColor.Dark" role="button">
                <button class="btn btn-link p-0" @onclick="ForceAddDrive" title="Force Add Drive">
                    <img src="/icons/plus-circle-dotted.svg" alt="Force Add Drive" style="height: 24px;"
                        class="theme-icon" />
                </button>
            </Tooltip>
        }
    </div>

    <!-- Drive Details Section -->
    @if (IsDriveDetailsVisible)
    {
        <div class="card-body">
            <!-- Drive Details Table -->
            <div class="table-responsive">
                <table class="table table-striped">
                    <tbody>
                        <tr>
                            <th>State</th>
                            <td>@(Model.IsConnected ? "Connected" : "Disconnected")</td>
                        </tr>
                        <tr>
                            <th>Vendor</th>
                            <td>@Model.Vendor</td>
                        </tr>
                        <tr>
                            <th>Model</th>
                            <td>@Model.Model</td>
                        </tr>
                        <tr>
                            <th>Serial</th>
                            <td>@Model.Serial</td>
                        </tr>
                        <tr>
                            <th>Size</th>
                            <td>@SizeFormatter.FormatSize(Model.Size)</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    }
</div>

@code {
    // ---------------------------
    // Parameters
    // ---------------------------

    [Parameter, EditorRequired]
    public PoolDrive Model { get; set; } = default!;

    [Parameter]
    public EventCallback<PoolDrive> OnForceAdd { get; set; }

    // ---------------------------
    // Private Fields
    // ---------------------------

    private bool IsDriveDetailsVisible { get; set; } = false;

    // ---------------------------
    // Event Handlers
    // ---------------------------

    /// <summary>
    /// Toggles the visibility of the drive details section.
    /// </summary>
    private void ToggleDetails()
    {
        IsDriveDetailsVisible = !IsDriveDetailsVisible;
    }

    /// <summary>
    /// Handles the Force Add Drive button click event.
    /// </summary>
    private async Task ForceAddDrive()
    {
        await OnForceAdd.InvokeAsync(Model);
    }
}
