@page "/DriveManagement"
@using Backy.Data
@using Backy.Models
@using Backy.Services
@using Backy.Components
@using Blazored.Toast.Services
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@inject ApplicationDbContext DbContext
@inject IToastService ToastService
@inject ILogger<DriveManagement> Logger

<PageTitle>Drive Catalog - Backy</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1>Drive Catalog</h1>
    <!-- Refresh Button -->
    <button class="btn btn-secondary" @onclick="LoadDrives">Refresh</button>
</div>

<!-- Pool Groups -->
@if (PoolGroups != null && PoolGroups.Any())
{
    @foreach (var pool in PoolGroups)
    {
        <PoolGroupDriveCard Model="@pool"
                            OnUnmountPool="@UnmountPool"
                            OnRemovePoolGroup="@RemovePoolGroup"
                            OnMountPool="@MountPool"
                            OnRenamePoolGroup="@RenamePoolGroup" />
    }
}

<!-- New Drives -->
@if (NewDrives != null && NewDrives.Any())
{
    <h2>New Drives</h2>
    <div class="row">
        @foreach (var drive in NewDrives)
        {
            <div class="col-md-4">
                <NewDriveCard Model="@drive"
                              OnProtect="@ProtectDrive"
                              OnSelect="@SelectDrive" />
            </div>
        }
    </div>
}

<!-- Protected Drives -->
@if (ProtectedDrives != null && ProtectedDrives.Any())
{
    <h2>Protected Drives</h2>
    <div class="row">
        @foreach (var drive in ProtectedDrives)
        {
            <div class="col-md-4">
                <ProtectedDriveCard Model="@drive"
                                    OnUnprotect="@UnprotectDrive" />
            </div>
        }
    </div>
}

<!-- Create Pool Modal -->
@if (isCreatePoolModalOpen)
{
    <Modal Title="Create Pool" Visible="isCreatePoolModalOpen" VisibleChanged="@(v => isCreatePoolModalOpen = v)">
        <EditForm Model="@CreatePoolRequest" OnValidSubmit="HandleCreatePool">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label for="poolLabel" class="form-label">Pool Label</label>
                <InputText id="poolLabel" class="form-control" @bind-Value="CreatePoolRequest.PoolLabel" required />
                <ValidationMessage For="@(() => CreatePoolRequest.PoolLabel)" />
            </div>

            <!-- Drive Labels -->
            @foreach (var drive in SelectedDrives)
            {
                <div class="mb-3">
                    <label class="form-label">Drive Label (@drive.Serial)</label>
                    <InputText class="form-control" @bind-Value="CreatePoolRequest.DriveLabels[drive.Serial]" />
                </div>
            }

            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="CloseCreatePoolModal">Close</button>
                <button type="submit" class="btn btn-primary">Create Pool</button>
            </div>
        </EditForm>
    </Modal>
}

<!-- Rename Pool Modal -->
@if (isRenamePoolModalOpen)
{
    <Modal Title="Rename Pool" Visible="isRenamePoolModalOpen" VisibleChanged="@(v => isRenamePoolModalOpen = v)">
        <EditForm Model="@RenamePoolRequest" OnValidSubmit="HandleRenamePool">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label for="newPoolLabel" class="form-label">New Pool Label</label>
                <InputText id="newPoolLabel" class="form-control" @bind-Value="RenamePoolRequest.NewPoolLabel" required />
                <ValidationMessage For="@(() => RenamePoolRequest.NewPoolLabel)" />
            </div>

            <!-- Drive Labels -->
            @foreach (var drive in PoolToRename.Drives)
            {
                <div class="mb-3">
                    <label class="form-label">Drive Label (@drive.Serial)</label>
                    <InputText class="form-control" @bind-Value="RenamePoolRequest.DriveLabels[drive.Id]" />
                </div>
            }

            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="CloseRenamePoolModal">Close</button>
                <button type="submit" class="btn btn-primary">Rename Pool</button>
            </div>
        </EditForm>
    </Modal>
}

@code {
    private List<PoolGroup> PoolGroups { get; set; } = new List<PoolGroup>();
    private List<Drive> NewDrives { get; set; } = new List<Drive>();
    private List<ProtectedDrive> ProtectedDrives { get; set; } = new List<ProtectedDrive>();
    private List<Drive> SelectedDrives { get; set; } = new List<Drive>();
    private CreatePoolRequest CreatePoolRequest { get; set; } = new CreatePoolRequest();
    private bool isCreatePoolModalOpen = false;
    private bool isRenamePoolModalOpen = false;
    private PoolGroup PoolToRename { get; set; }
    private RenamePoolRequest RenamePoolRequest { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadDrives();
    }

    private async Task LoadDrives()
    {
        try
        {
            LoadingService.ShowLoading();
            await OrganizeDrives();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading drives.");
            ToastService.ShowError("Failed to load drives.");
        }
        finally
        {
            LoadingService.HideLoading();
        }
    }

    private async Task OrganizeDrives()
    {
        var activeDrives = await DriveService.UpdateActiveDrivesAsync();
        PoolGroups = await DbContext.PoolGroups.Include(pg => pg.Drives).ToListAsync();
        ProtectedDrives = await DbContext.ProtectedDrives.ToListAsync();

        // Update connected status and properties for drives in pools
        foreach (var pool in PoolGroups)
        {
            bool allConnected = true;
            foreach (var drive in pool.Drives)
            {
                // Find matching active drive
                var activeDrive = activeDrives.FirstOrDefault(d => d.Serial == drive.Serial);
                if (activeDrive != null)
                {
                    // Update properties
                    drive.IsConnected = true;
                    drive.Vendor = activeDrive.Vendor;
                    drive.Model = activeDrive.Model;
                    drive.IsMounted = activeDrive.IsMounted;
                    drive.DevPath = activeDrive.IdLink;
                    drive.Size = activeDrive.Size;
                }
                else
                {
                    drive.IsConnected = false;
                    allConnected = false;
                }
            }

            // Set PoolEnabled based on whether all drives are connected
            pool.AllDrivesConnected = allConnected;

            if (pool.PoolEnabled)
            {
                // Fetch Pool Status
                string status = DriveService.FetchPoolStatus(pool.PoolGroupId);
                if (pool.PoolStatus != status)
                {
                    pool.PoolStatus = status;
                    await DbContext.SaveChangesAsync();
                }

                if (!string.IsNullOrEmpty(pool.MountPath))
                {
                    var (size, used, available, usePercent) = DriveService.GetMountPointSize(pool.MountPath);

                    if (size > 0)
                    {
                        pool.Size = size;
                        pool.Used = used;
                        pool.Available = available;
                        pool.UsePercent = usePercent;
                        await DbContext.SaveChangesAsync();
                    }
                }
            }
        }

        // NewDrives: drives that are active but not in any pool and not protected
        var pooledDriveSerials = PoolGroups.SelectMany(p => p.Drives).Select(d => d.Serial).ToHashSet();
        var protectedSerials = ProtectedDrives.Select(pd => pd.Serial).ToHashSet();
        NewDrives = activeDrives.Where(d => !pooledDriveSerials.Contains(d.Serial) && !protectedSerials.Contains(d.Serial)).ToList();
    }

    private async Task ProtectDrive(string serial)
    {
        try
        {
            var result = await DriveService.ProtectDriveAsync(serial);
            if (result.Success)
            {
                ToastService.ShowSuccess(result.Message);
                await LoadDrives();
            }
            else
            {
                ToastService.ShowWarning(result.Message);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error protecting drive.");
            ToastService.ShowError("Failed to protect drive.");
        }
    }

    private async Task UnprotectDrive(string serial)
    {
        try
        {
            var result = await DriveService.UnprotectDriveAsync(serial);
            if (result.Success)
            {
                ToastService.ShowSuccess(result.Message);
                await LoadDrives();
            }
            else
            {
                ToastService.ShowWarning(result.Message);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error unprotecting drive.");
            ToastService.ShowError("Failed to unprotect drive.");
        }
    }

    private async Task SelectDrive(string serial)
    {
        var drive = NewDrives.FirstOrDefault(d => d.Serial == serial);
        if (drive != null)
        {
            SelectedDrives.Add(drive);
            OpenCreatePoolModal();
        }
        else
        {
            ToastService.ShowError("Drive not found.");
        }
    }

    private void OpenCreatePoolModal()
    {
        CreatePoolRequest = new CreatePoolRequest
        {
            PoolLabel = "",
            DriveSerials = SelectedDrives.Select(d => d.Serial).ToList(),
            DriveLabels = SelectedDrives.ToDictionary(d => d.Serial, d => d.Label ?? "")
        };
        isCreatePoolModalOpen = true;
    }

    private void CloseCreatePoolModal()
    {
        isCreatePoolModalOpen = false;
        SelectedDrives.Clear();
    }

    private async Task HandleCreatePool()
    {
        try
        {
            LoadingService.ShowLoading();
            var result = await DriveService.CreatePoolAsync(CreatePoolRequest);

            if (result.Success)
            {
                ToastService.ShowSuccess(result.Message);
                isCreatePoolModalOpen = false;
                SelectedDrives.Clear();
                await LoadDrives();
            }
            else
            {
                ToastService.ShowError(result.Message);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error creating pool.");
            ToastService.ShowError("Failed to create pool.");
        }
        finally
        {
            LoadingService.HideLoading();
        }
    }

    private async Task UnmountPool(PoolGroup poolGroup)
    {
        try
        {
            LoadingService.ShowLoading();
            var result = await DriveService.UnmountPoolAsync(poolGroup.PoolGroupGuid);
            if (result.Success)
            {
                ToastService.ShowSuccess(result.Message);
                await LoadDrives();
            }
            else
            {
                ToastService.ShowError(result.Message);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error unmounting pool '{poolGroup.GroupLabel}'.");
            ToastService.ShowError("Failed to unmount pool.");
        }
        finally
        {
            LoadingService.HideLoading();
        }
    }

    private async Task RemovePoolGroup(PoolGroup poolGroup)
    {
        try
        {
            LoadingService.ShowLoading();
            var result = await DriveService.RemovePoolGroupAsync(poolGroup.PoolGroupGuid);
            if (result.Success)
            {
                ToastService.ShowSuccess(result.Message);
                await LoadDrives();
            }
            else
            {
                ToastService.ShowError(result.Message);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error removing pool '{poolGroup.GroupLabel}'.");
            ToastService.ShowError("Failed to remove pool.");
        }
        finally
        {
            LoadingService.HideLoading();
        }
    }

    private async Task MountPool(PoolGroup poolGroup)
    {
        try
        {
            LoadingService.ShowLoading();
            var result = await DriveService.MountPoolAsync(poolGroup.PoolGroupGuid);
            if (result.Success)
            {
                ToastService.ShowSuccess(result.Message);
                await LoadDrives();
            }
            else
            {
                ToastService.ShowError(result.Message);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error mounting pool '{poolGroup.GroupLabel}'.");
            ToastService.ShowError("Failed to mount pool.");
        }
        finally
        {
            LoadingService.HideLoading();
        }
    }

    private async Task RenamePoolGroup(PoolGroup poolGroup)
    {
        // Open the rename modal
        isRenamePoolModalOpen = true;
        PoolToRename = poolGroup;
        RenamePoolRequest = new RenamePoolRequest
        {
            PoolGroupGuid = poolGroup.PoolGroupGuid,
            NewPoolLabel = poolGroup.GroupLabel,
            DriveLabels = poolGroup.Drives.ToDictionary(d => d.Id, d => d.Label)
        };
    }

    private void CloseRenamePoolModal()
    {
        isRenamePoolModalOpen = false;
        PoolToRename = null;
        RenamePoolRequest = null;
    }

    private async Task HandleRenamePool()
    {
        try
        {
            // Call the service to rename the pool
            var result = await DriveService.RenamePoolGroupAsync(RenamePoolRequest);

            if (result.Success)
            {
                ToastService.ShowSuccess(result.Message);
                isRenamePoolModalOpen = false;
                await LoadDrives();
            }
            else
            {
                ToastService.ShowError(result.Message);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error renaming pool.");
            ToastService.ShowError("Failed to rename pool.");
        }
    }
}
